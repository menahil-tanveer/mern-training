{"ast":null,"code":"import axios from \"axios\";\n\nconst api = _ref => {\n  let {\n    dispatch\n  } = _ref;\n  return next => async action => {\n    if (action.type !== action.payloadtype) return next(action); // next(action); // if not placed here, this action will be swallowed and redux will move onto the actions defined below this\n\n    const {\n      url,\n      method,\n      data,\n      onStart,\n      onSucces,\n      onError\n    } = action;\n    if (onStart) dispatch({\n      type: onStart\n    });\n    next(action);\n\n    try {\n      const response = await axios.request({\n        baseURL: \"https://jsonplaceholder.typicode.com/users\",\n        url,\n        method,\n        data\n      }); //general\n\n      console.log(\"dispatch success action\");\n      dispatch(actions.apiCallSuccess(response.data)); // sepcific\n\n      if (onSucces) dispatch({\n        type: onSucces,\n        payload: response.data\n      });\n    } catch (error) {\n      // general error message\n      dispatch(actions.apiCallFailed(error)); // specific error message\n\n      if (onError) dispatch({\n        type: onError,\n        payload: error\n      });\n    }\n  };\n};\n\nexport default api;","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/middleware/api.js"],"names":["axios","api","dispatch","next","action","type","payloadtype","url","method","data","onStart","onSucces","onError","response","request","baseURL","console","log","actions","apiCallSuccess","payload","error","apiCallFailed"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,GAAG,GACP;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,SACCC,IAAD,IACA,MAAOC,MAAP,IAAkB;AAChB,QAAIA,MAAM,CAACC,IAAP,KAAgBD,MAAM,CAACE,WAA3B,EAAwC,OAAOH,IAAI,CAACC,MAAD,CAAX,CADxB,CAEhB;;AACA,UAAM;AAAEG,MAAAA,GAAF;AAAOC,MAAAA,MAAP;AAAeC,MAAAA,IAAf;AAAqBC,MAAAA,OAArB;AAA8BC,MAAAA,QAA9B;AAAwCC,MAAAA;AAAxC,QAAoDR,MAA1D;AACA,QAAIM,OAAJ,EAAaR,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEK;AAAR,KAAD,CAAR;AACbP,IAAAA,IAAI,CAACC,MAAD,CAAJ;;AACA,QAAI;AACF,YAAMS,QAAQ,GAAG,MAAMb,KAAK,CAACc,OAAN,CAAc;AACnCC,QAAAA,OAAO,EAAE,4CAD0B;AAEnCR,QAAAA,GAFmC;AAGnCC,QAAAA,MAHmC;AAInCC,QAAAA;AAJmC,OAAd,CAAvB,CADE,CAOF;;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAf,MAAAA,QAAQ,CAACgB,OAAO,CAACC,cAAR,CAAuBN,QAAQ,CAACJ,IAAhC,CAAD,CAAR,CATE,CAUF;;AACA,UAAIE,QAAJ,EAAcT,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEM,QAAR;AAAkBS,QAAAA,OAAO,EAAEP,QAAQ,CAACJ;AAApC,OAAD,CAAR;AACf,KAZD,CAYE,OAAOY,KAAP,EAAc;AACd;AACAnB,MAAAA,QAAQ,CAACgB,OAAO,CAACI,aAAR,CAAsBD,KAAtB,CAAD,CAAR,CAFc,CAGd;;AACA,UAAIT,OAAJ,EAAaV,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEO,OAAR;AAAiBQ,QAAAA,OAAO,EAAEC;AAA1B,OAAD,CAAR;AACd;AACF,GA1BD;AAAA,CADF;;AA4BA,eAAepB,GAAf","sourcesContent":["import axios from \"axios\";\nconst api =\n  ({ dispatch }) =>\n  (next) =>\n  async (action) => {\n    if (action.type !== action.payloadtype) return next(action);\n    // next(action); // if not placed here, this action will be swallowed and redux will move onto the actions defined below this\n    const { url, method, data, onStart, onSucces, onError } = action;\n    if (onStart) dispatch({ type: onStart });\n    next(action);\n    try {\n      const response = await axios.request({\n        baseURL: \"https://jsonplaceholder.typicode.com/users\",\n        url,\n        method,\n        data,\n      });\n      //general\n      console.log(\"dispatch success action\");\n      dispatch(actions.apiCallSuccess(response.data));\n      // sepcific\n      if (onSucces) dispatch({ type: onSucces, payload: response.data });\n    } catch (error) {\n      // general error message\n      dispatch(actions.apiCallFailed(error));\n      // specific error message\n      if (onError) dispatch({ type: onError, payload: error });\n    }\n  };\nexport default api;\n"]},"metadata":{},"sourceType":"module"}