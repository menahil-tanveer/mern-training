{"ast":null,"code":"import { bugAdded, bugResolved, getUnresolvedBugs, getBugByUserId, bugAssigned } from \"./store/bugs\";\nimport { projectAdded } from \"./store/projects\";\nimport { userAdded } from \"./store/users\";\nimport configureStore from \"./store/configureStore\";\nimport * as actions from \".\";\nconst store = configureStore(); // if written between dispatching actions, we will not be notified about the second action\n// const unsubscribe = store.subscribe(() => {\n//   console.log(\"store changed\", store.getState());\n// });\n// add bug\n// store.dispatch(projectAdded({ name: \"Project 1\" }));\n// store.dispatch(bugAdded({ description: \"bug 1\" }));\n// store.dispatch(bugAdded({ description: \"bug 2\" }));\n// store.dispatch(bugAdded({ description: \"bug 3\" }));\n// dispatching an action inside an action\n// store.dispatch(() => {\n//   store.dispatch({\n//     type: \"bugsReceived\",\n//     bugs: [\"sample 1\", \"sample 2\", \"sample 3\"],\n//   });\n//   console.log(store.getState());\n// });\n// resolve\n// store.dispatch(bugResolved({ id: 1 }));\n// store.dispatch(userAdded({ name: \"user 1\" }));\n// store.dispatch(userAdded({ name: \"user 2\" }));\n// store.dispatch(bugAssigned({ bugId: 1, userId: 1 }));\n// store.dispatch({\n//   type: \"error\",\n//   payload: {\n//     message: \"An error has occurred\",\n//   },\n// });\n\nconsole.log(\"store:\", store);\nconsole.log(\"state:\", store.getState());\nconst unresolvedBugs = getUnresolvedBugs(store.getState());\nconsole.log(\"unresolvedBugs\", unresolvedBugs);\nconst bugs = getBugByUserId(1)(store.getState());\nconsole.log(\"Get bug by user id::\", bugs);\nstore.dispatch({\n  type: \"apiCallBegan\",\n  payload: {\n    url: \"/users\",\n    onSuccess: \"usersAdded\",\n    // action that needs to be dispatched on success\n    onError: \"apiRequestFailed\" // action that needs to be dispatched on failure\n\n  }\n});\nconsole.log(\"USERS STATE\", store.getState());","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/index.js"],"names":["bugAdded","bugResolved","getUnresolvedBugs","getBugByUserId","bugAssigned","projectAdded","userAdded","configureStore","actions","store","console","log","getState","unresolvedBugs","bugs","dispatch","type","payload","url","onSuccess","onError"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,iBAHF,EAIEC,cAJF,EAKEC,WALF,QAMO,cANP;AAOA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,GAAzB;AACA,MAAMC,KAAK,GAAGF,cAAc,EAA5B,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAG,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACAC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAK,CAACG,QAAN,EAAtB;AACA,MAAMC,cAAc,GAAGX,iBAAiB,CAACO,KAAK,CAACG,QAAN,EAAD,CAAxC;AACAF,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BE,cAA9B;AACA,MAAMC,IAAI,GAAGX,cAAc,CAAC,CAAD,CAAd,CAAkBM,KAAK,CAACG,QAAN,EAAlB,CAAb;AACAF,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCG,IAApC;AAEAL,KAAK,CAACM,QAAN,CAAe;AACbC,EAAAA,IAAI,EAAE,cADO;AAEbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,QADE;AAEPC,IAAAA,SAAS,EAAE,YAFJ;AAEkB;AACzBC,IAAAA,OAAO,EAAE,kBAHF,CAGsB;;AAHtB;AAFI,CAAf;AAQAV,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,KAAK,CAACG,QAAN,EAA3B","sourcesContent":["import {\n  bugAdded,\n  bugResolved,\n  getUnresolvedBugs,\n  getBugByUserId,\n  bugAssigned,\n} from \"./store/bugs\";\nimport { projectAdded } from \"./store/projects\";\nimport { userAdded } from \"./store/users\";\nimport configureStore from \"./store/configureStore\";\nimport * as actions from \".\"\nconst store = configureStore();\n// if written between dispatching actions, we will not be notified about the second action\n// const unsubscribe = store.subscribe(() => {\n//   console.log(\"store changed\", store.getState());\n// });\n// add bug\n// store.dispatch(projectAdded({ name: \"Project 1\" }));\n// store.dispatch(bugAdded({ description: \"bug 1\" }));\n// store.dispatch(bugAdded({ description: \"bug 2\" }));\n// store.dispatch(bugAdded({ description: \"bug 3\" }));\n// dispatching an action inside an action\n// store.dispatch(() => {\n//   store.dispatch({\n//     type: \"bugsReceived\",\n//     bugs: [\"sample 1\", \"sample 2\", \"sample 3\"],\n//   });\n//   console.log(store.getState());\n// });\n// resolve\n// store.dispatch(bugResolved({ id: 1 }));\n// store.dispatch(userAdded({ name: \"user 1\" }));\n// store.dispatch(userAdded({ name: \"user 2\" }));\n// store.dispatch(bugAssigned({ bugId: 1, userId: 1 }));\n// store.dispatch({\n//   type: \"error\",\n//   payload: {\n//     message: \"An error has occurred\",\n//   },\n// });\nconsole.log(\"store:\", store);\nconsole.log(\"state:\", store.getState());\nconst unresolvedBugs = getUnresolvedBugs(store.getState());\nconsole.log(\"unresolvedBugs\", unresolvedBugs);\nconst bugs = getBugByUserId(1)(store.getState());\nconsole.log(\"Get bug by user id::\", bugs);\n\nstore.dispatch({\n  type: \"apiCallBegan\",\n  payload: {\n    url: \"/users\",\n    onSuccess: \"usersAdded\", // action that needs to be dispatched on success\n    onError: \"apiRequestFailed\", // action that needs to be dispatched on failure\n  },\n});\nconsole.log(\"USERS STATE\", store.getState());\n"]},"metadata":{},"sourceType":"module"}