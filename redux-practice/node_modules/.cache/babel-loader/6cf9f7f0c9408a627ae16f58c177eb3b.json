{"ast":null,"code":"import axios from \"axios\";\n\nconst api = _ref => {\n  let {\n    dispatch\n  } = _ref;\n  return next => async action => {\n    if (action.type !== \"apiCallBegan\") return next(action);\n    next(action); // if not placed here, this action will be swallowed and redux will move onto the actions defined below this\n\n    const {\n      url,\n      data,\n      onStart,\n      onSuccess,\n      onError\n    } = action; // if (onStart) dispatch({ type: onStart });\n    // next(action);\n\n    try {\n      const response = await axios.request({\n        baseURL: \"https://jsonplaceholder.typicode.com/users\",\n        url,\n        method,\n        data\n      }); //general\n      // dispatch(action.payload.apiCallSuccess(response.data));\n      // sepcific\n\n      console.log(\"onSuccess\", action.payload.onSuccess);\n      if (action.payload.onSuccess) dispatch({\n        type: action.payload.onSuccess,\n        payload: response.data\n      });\n    } catch (error) {\n      // general error message\n      //   dispatch(action.payload.apiCallFailed(error));\n      // specific error message\n      if (onError) dispatch({\n        type: onError,\n        payload: error\n      });\n    }\n  };\n};\n\nexport default api;","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/middleware/api.js"],"names":["axios","api","dispatch","next","action","type","url","data","onStart","onSuccess","onError","response","request","baseURL","method","console","log","payload","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,GAAG,GACP;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,SACCC,IAAD,IACA,MAAOC,MAAP,IAAkB;AAChB,QAAIA,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAoC,OAAOF,IAAI,CAACC,MAAD,CAAX;AACpCD,IAAAA,IAAI,CAACC,MAAD,CAAJ,CAFgB,CAEF;;AACd,UAAM;AAAEE,MAAAA,GAAF;AAAOC,MAAAA,IAAP;AAAaC,MAAAA,OAAb;AAAsBC,MAAAA,SAAtB;AAAiCC,MAAAA;AAAjC,QAA6CN,MAAnD,CAHgB,CAIhB;AACA;;AACA,QAAI;AACF,YAAMO,QAAQ,GAAG,MAAMX,KAAK,CAACY,OAAN,CAAc;AACnCC,QAAAA,OAAO,EAAE,4CAD0B;AAEnCP,QAAAA,GAFmC;AAGnCQ,QAAAA,MAHmC;AAInCP,QAAAA;AAJmC,OAAd,CAAvB,CADE,CAOF;AACA;AACA;;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBZ,MAAM,CAACa,OAAP,CAAeR,SAAxC;AACA,UAAIL,MAAM,CAACa,OAAP,CAAeR,SAAnB,EACEP,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAED,MAAM,CAACa,OAAP,CAAeR,SAAvB;AAAkCQ,QAAAA,OAAO,EAAEN,QAAQ,CAACJ;AAApD,OAAD,CAAR;AACH,KAbD,CAaE,OAAOW,KAAP,EAAc;AACd;AACA;AACA;AACA,UAAIR,OAAJ,EAAaR,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEK,OAAR;AAAiBO,QAAAA,OAAO,EAAEC;AAA1B,OAAD,CAAR;AACd;AACF,GA3BD;AAAA,CADF;;AA6BA,eAAejB,GAAf","sourcesContent":["import axios from \"axios\";\nconst api =\n  ({ dispatch }) =>\n  (next) =>\n  async (action) => {\n    if (action.type !== \"apiCallBegan\") return next(action);\n    next(action); // if not placed here, this action will be swallowed and redux will move onto the actions defined below this\n    const { url, data, onStart, onSuccess, onError } = action;\n    // if (onStart) dispatch({ type: onStart });\n    // next(action);\n    try {\n      const response = await axios.request({\n        baseURL: \"https://jsonplaceholder.typicode.com/users\",\n        url,\n        method,\n        data,\n      });\n      //general\n      // dispatch(action.payload.apiCallSuccess(response.data));\n      // sepcific\n      console.log(\"onSuccess\", action.payload.onSuccess);\n      if (action.payload.onSuccess)\n        dispatch({ type: action.payload.onSuccess, payload: response.data });\n    } catch (error) {\n      // general error message\n      //   dispatch(action.payload.apiCallFailed(error));\n      // specific error message\n      if (onError) dispatch({ type: onError, payload: error });\n    }\n  };\nexport default api;\n"]},"metadata":{},"sourceType":"module"}