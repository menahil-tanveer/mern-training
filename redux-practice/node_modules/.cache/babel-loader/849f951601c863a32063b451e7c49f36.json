{"ast":null,"code":"import reducer from \"./reducer\";\nimport logger from \"./middleware/logger\";\nimport displayToast from \"./middleware/displayToast\";\nimport api from \"./middleware/api\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n/**\n * @description\n * This method is responsible for store configuration\n * Applying middleware without using redux toolkit:\n * const store = createStore(reducer, devToolsEnhancer({ trace: true }));\n * Redux toolkit contains a bunch of functions that simplifies things for us. Here onwards we will use redux toolkit.\n * @returns store\n *\n */\n\nexport default function () {\n  // Always pass a refernce of the function donot call it i.e. write 'reducer' NOT 'reducer()'\n  return configureStore({\n    reducer,\n    middleware: [...getDefaultMiddleware(), logger({\n      test: \"1\"\n    }), api] // Note: the order of middlewares matter & getDefaultMiddleware gets an array of all the middlewares\n    // whereas spread operator is used to copy them\n\n  });\n}","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/configureStore.js"],"names":["reducer","logger","displayToast","api","configureStore","getDefaultMiddleware","middleware","test"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEA,SAASC,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,YAAY;AACzB;AACA,SAAOD,cAAc,CAAC;AACpBJ,IAAAA,OADoB;AAEpBM,IAAAA,UAAU,EAAE,CACV,GAAGD,oBAAoB,EADb,EAEVJ,MAAM,CAAC;AAAEM,MAAAA,IAAI,EAAE;AAAR,KAAD,CAFI,EAGVJ,GAHU,CAFQ,CAOpB;AACA;;AARoB,GAAD,CAArB;AAUD","sourcesContent":["import reducer from \"./reducer\";\nimport logger from \"./middleware/logger\";\nimport displayToast from \"./middleware/displayToast\";\nimport api from \"./middleware/api\";\n\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n/**\n * @description\n * This method is responsible for store configuration\n * Applying middleware without using redux toolkit:\n * const store = createStore(reducer, devToolsEnhancer({ trace: true }));\n * Redux toolkit contains a bunch of functions that simplifies things for us. Here onwards we will use redux toolkit.\n * @returns store\n *\n */\nexport default function () {\n  // Always pass a refernce of the function donot call it i.e. write 'reducer' NOT 'reducer()'\n  return configureStore({\n    reducer,\n    middleware: [\n      ...getDefaultMiddleware(),\n      logger({ test: \"1\" }),\n      api,\n    ],\n    // Note: the order of middlewares matter & getDefaultMiddleware gets an array of all the middlewares\n    // whereas spread operator is used to copy them\n  });\n}\n"]},"metadata":{},"sourceType":"module"}