{"ast":null,"code":"import { createAction, createReducer } from \"@reduxjs/toolkit\"; // ACTION TYPES\n// const BUG_ADDED = \"bugAdded\";\n// const BUG_REMOVED = \"bugRemoved\";\n// const BUG_RESOLVED = \"bugResolved\";\n// ACTION CREATORS: manual approach\n// export const bugAdded = (description) => ({\n//   type: BUG_ADDED,\n//   payload: {\n//     description,\n//   },\n// });\n// ACTION CREATORS: concise approach using redux toolkit\n// createAction method creates an action creator\n// createAction has a type property that can be used to return action type (it can also be done using toString method)\n// Example:\n// const apiCallBegan = createAction(\"api/callBegan\");\n// console.log(apiCallBegan.type) || console.log(apiCallBegan.toString())\n// to define payload:\n// console.log(apiCallBegan({id:1})) this will add id as a property of payload obj\n\nexport const bugAdded = createAction(\"bugAdded\");\nexport const bugResolved = createAction(\"bugResolved\");\nexport const bugRemoved = createAction(\"bugRemoved\");\nexport const apiCallBegan = createAction(\"api/callBegan\");\nexport const apiCallSuccess = createAction(\"api/callSuccess\");\nexport const apiCallFailed = createAction(\"api/callFailed\"); // REDUCER\n// Note: reducer must always be a default export when following ducks pattern\n// let lastId = 0;\n// function reducer(state = [], action) {\n//   switch (action.type) {\n//     case bugAdded.type:\n//       return [\n//         ...state,\n//         {\n//           id: lastId++,\n//           description: action.payload.description,\n//           resolved: false,\n//         },\n//       ];\n//     case bugRemoved.type:\n//       return state.filter((bug) => bug.id !== action.payload.id);\n//     case bugResolved.type:\n//       return state.map((bug) =>\n//         bug.id !== action.payload.id ? bug : { ...bug, resolved: true }\n//       );\n//     default:\n//       return state;\n//   }\n// }\n// export default reducer;\n// CREATING REDUCER USING TOOLKIT\n\nconst reducer = createReducer([], {\n  bugAdded: (state, action) => {\n    state.push({});\n  }\n}); // const slice = createSlice({\n//   name: \"bugs\",\n//   initialState: {\n//     list: [],\n//     loading: false,\n//     lastFetch: null,\n//   },\n//   // ---------------------------- REDUCERS--------------------------\n//   reducers: {\n//     bugsRequested: (bugs, action) => {\n//       bugs.loading = true;\n//     },\n//     bugsReceived: (bugs, action) => {\n//       bugs.list = action.payload;\n//       bugs.loading = false;\n//     },\n//   },\n// });\n// export const { bugsRequested, bugsReceived } = slice.actions;\n// export default slice.reducer;\n// const url = \"bugs/bugsRequested\";\n// export const loadBugs = () => {\n//   apiCallBegan({\n//     url,\n//     onStart: bugsRequested.type,\n//     onSuccess: bugsReceived.type,\n//   });\n// };","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/bugs.js"],"names":["createAction","createReducer","bugAdded","bugResolved","bugRemoved","apiCallBegan","apiCallSuccess","apiCallFailed","reducer","state","action","push"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,kBAA5C,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAGF,YAAY,CAAC,UAAD,CAA7B;AACP,OAAO,MAAMG,WAAW,GAAGH,YAAY,CAAC,aAAD,CAAhC;AACP,OAAO,MAAMI,UAAU,GAAGJ,YAAY,CAAC,YAAD,CAA/B;AAEP,OAAO,MAAMK,YAAY,GAAGL,YAAY,CAAC,eAAD,CAAjC;AACP,OAAO,MAAMM,cAAc,GAAGN,YAAY,CAAC,iBAAD,CAAnC;AACP,OAAO,MAAMO,aAAa,GAAGP,YAAY,CAAC,gBAAD,CAAlC,C,CACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA,MAAMQ,OAAO,GAAGP,aAAa,CAAC,EAAD,EAAK;AAChCC,EAAAA,QAAQ,EAAE,CAACO,KAAD,EAAQC,MAAR,KAAkB;AAC1BD,IAAAA,KAAK,CAACE,IAAN,CAAW,EAAX;AAGD;AAL+B,CAAL,CAA7B,C,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createAction, createReducer } from \"@reduxjs/toolkit\";\n// ACTION TYPES\n// const BUG_ADDED = \"bugAdded\";\n// const BUG_REMOVED = \"bugRemoved\";\n// const BUG_RESOLVED = \"bugResolved\";\n// ACTION CREATORS: manual approach\n// export const bugAdded = (description) => ({\n//   type: BUG_ADDED,\n//   payload: {\n//     description,\n//   },\n// });\n// ACTION CREATORS: concise approach using redux toolkit\n// createAction method creates an action creator\n// createAction has a type property that can be used to return action type (it can also be done using toString method)\n// Example:\n// const apiCallBegan = createAction(\"api/callBegan\");\n// console.log(apiCallBegan.type) || console.log(apiCallBegan.toString())\n// to define payload:\n// console.log(apiCallBegan({id:1})) this will add id as a property of payload obj\nexport const bugAdded = createAction(\"bugAdded\");\nexport const bugResolved = createAction(\"bugResolved\");\nexport const bugRemoved = createAction(\"bugRemoved\");\n\nexport const apiCallBegan = createAction(\"api/callBegan\");\nexport const apiCallSuccess = createAction(\"api/callSuccess\");\nexport const apiCallFailed = createAction(\"api/callFailed\");\n// REDUCER\n// Note: reducer must always be a default export when following ducks pattern\n// let lastId = 0;\n// function reducer(state = [], action) {\n//   switch (action.type) {\n//     case bugAdded.type:\n//       return [\n//         ...state,\n//         {\n//           id: lastId++,\n//           description: action.payload.description,\n//           resolved: false,\n//         },\n//       ];\n//     case bugRemoved.type:\n//       return state.filter((bug) => bug.id !== action.payload.id);\n//     case bugResolved.type:\n//       return state.map((bug) =>\n//         bug.id !== action.payload.id ? bug : { ...bug, resolved: true }\n//       );\n//     default:\n//       return state;\n//   }\n// }\n// export default reducer;\n\n\n// CREATING REDUCER USING TOOLKIT\nconst reducer = createReducer([], {\n  bugAdded: (state, action) =>{\n    state.push({\n      \n    })\n  }\n})\n// const slice = createSlice({\n//   name: \"bugs\",\n//   initialState: {\n//     list: [],\n//     loading: false,\n//     lastFetch: null,\n//   },\n//   // ---------------------------- REDUCERS--------------------------\n//   reducers: {\n//     bugsRequested: (bugs, action) => {\n//       bugs.loading = true;\n//     },\n//     bugsReceived: (bugs, action) => {\n//       bugs.list = action.payload;\n//       bugs.loading = false;\n//     },\n//   },\n// });\n\n// export const { bugsRequested, bugsReceived } = slice.actions;\n// export default slice.reducer;\n\n// const url = \"bugs/bugsRequested\";\n// export const loadBugs = () => {\n//   apiCallBegan({\n//     url,\n//     onStart: bugsRequested.type,\n//     onSuccess: bugsReceived.type,\n//   });\n// };\n"]},"metadata":{},"sourceType":"module"}