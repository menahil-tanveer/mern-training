{"ast":null,"code":"import { createStore } from \"redux\";\nimport reducer from \"./bugs.js\"; // import logger from \"./store/middleware/logger\";\n// import displayToast from \"./store/middleware/displayToast\";\n// import api from \"./store/middleware/api\";\n\nimport { devToolsEnhancer } from \"redux-devtools-extension\"; // import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n// import func from \"./store/middleware/func\";\n//always pass a refernce of the function donot call it i.e. write 'reducer' rather than 'reducer()'\n// This is how a middleware is applied without using redux toolkit\n// const store = createStore(reducer, devToolsEnhancer({ trace: true }));\n// //REDUX TOOLKIT (simplifies REDUX code)\n// // const store = configureStore({\n// //   reducer,\n// //   middleware: [...getDefaultMiddleware(), logger(\"console\"), displayToast, api], //note: the order of middlewares matter & getDefaultMiddleware gets an array of all the middlewares && spread operator is used to copy them\n// // });\n// // passing a function in dispatch\n// // here, type of this action is function\n// store.dispatch((dispatch, getState) => {\n//   // Call an API\n//   // If promise is resolved, dispatch this\n//   dispatch({ type: \"bugsReceived\", bugs: [1, 2, 3] });\n//   console.log(\"getState\", getState());\n//   // If promise is rejected, dispatch that\n// });\n// // console.log(\"dispatch error action::\");\n// store.dispatch({\n//   type: \"error\",\n//   payload: {\n//     message: \"An error has occurred\",\n//   },\n// });\n\nex;\nexport default store;","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/configureStore.js"],"names":["createStore","reducer","devToolsEnhancer","ex","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CACA;AACA;AACA;;AACA,SAASC,gBAAT,QAAiC,0BAAjC,C,CACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,EAAE;AACF,eAAeC,KAAf","sourcesContent":["import { createStore } from \"redux\";\nimport reducer from \"./bugs.js\";\n// import logger from \"./store/middleware/logger\";\n// import displayToast from \"./store/middleware/displayToast\";\n// import api from \"./store/middleware/api\";\nimport { devToolsEnhancer } from \"redux-devtools-extension\";\n// import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n\n// import func from \"./store/middleware/func\";\n\n//always pass a refernce of the function donot call it i.e. write 'reducer' rather than 'reducer()'\n\n// This is how a middleware is applied without using redux toolkit\n// const store = createStore(reducer, devToolsEnhancer({ trace: true }));\n\n// //REDUX TOOLKIT (simplifies REDUX code)\n\n// // const store = configureStore({\n// //   reducer,\n// //   middleware: [...getDefaultMiddleware(), logger(\"console\"), displayToast, api], //note: the order of middlewares matter & getDefaultMiddleware gets an array of all the middlewares && spread operator is used to copy them\n// // });\n\n// // passing a function in dispatch\n// // here, type of this action is function\n// store.dispatch((dispatch, getState) => {\n//   // Call an API\n//   // If promise is resolved, dispatch this\n//   dispatch({ type: \"bugsReceived\", bugs: [1, 2, 3] });\n//   console.log(\"getState\", getState());\n//   // If promise is rejected, dispatch that\n// });\n// // console.log(\"dispatch error action::\");\n// store.dispatch({\n//   type: \"error\",\n//   payload: {\n//     message: \"An error has occurred\",\n//   },\n// });\n\nex\nexport default store;\n"]},"metadata":{},"sourceType":"module"}