{"ast":null,"code":"import axios from \"axios\";\nimport { usersAdded } from \"../users\";\nimport * as actions from '../api';\n\nconst api = _ref => {\n  let {\n    dispatch,\n    getState\n  } = _ref;\n  return next => async action => {\n    if (action.type !== actions.type) return next(action);\n    next(action); // if not placed here, this action will be swallowed and redux will move onto the actions defined below this\n\n    const {\n      onSuccess,\n      onError\n    } = action.payload; // if (onStart) dispatch({ type: onStart });\n    // next(action);\n\n    try {\n      const response = await axios.request({\n        baseURL: \"https://jsonplaceholder.typicode.com/users\" // data, // optional\n\n      }); //general\n      // dispatch(action.payload.apiCallSuccess(response.data));\n      // sepcific\n\n      console.log(\"onSuccess\");\n      if (onSuccess) dispatch(usersAdded(response.data)); // this method will update the state of users\n      //   dispatch({ type: action.payload.onSuccess, payload: response.data });\n\n      console.log(\"users\", response.data);\n      next(action);\n    } catch (error) {\n      // general error message\n      //   dispatch(action.payload.apiCallFailed(error));\n      // specific error message\n      if (onError) dispatch({\n        type: onError,\n        payload: error\n      });\n    }\n  };\n};\n\nexport default api;","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/middleware/api.js"],"names":["axios","usersAdded","actions","api","dispatch","getState","next","action","type","onSuccess","onError","payload","response","request","baseURL","console","log","data","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,QAAzB;;AACA,MAAMC,GAAG,GACP;AAAA,MAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD;AAAA,SACCC,IAAD,IACA,MAAOC,MAAP,IAAkB;AAChB,QAAIA,MAAM,CAACC,IAAP,KAAgBN,OAAO,CAACM,IAA5B,EAAkC,OAAOF,IAAI,CAACC,MAAD,CAAX;AAClCD,IAAAA,IAAI,CAACC,MAAD,CAAJ,CAFgB,CAEF;;AACd,UAAM;AAAEE,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyBH,MAAM,CAACI,OAAtC,CAHgB,CAIhB;AACA;;AACA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,OAAN,CAAc;AACnCC,QAAAA,OAAO,EAAE,4CAD0B,CAEnC;;AAFmC,OAAd,CAAvB,CADE,CAKF;AACA;AACA;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAIP,SAAJ,EAAeL,QAAQ,CAACH,UAAU,CAACW,QAAQ,CAACK,IAAV,CAAX,CAAR,CATb,CASkD;AACpD;;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,QAAQ,CAACK,IAA9B;AACAX,MAAAA,IAAI,CAACC,MAAD,CAAJ;AACD,KAbD,CAaE,OAAOW,KAAP,EAAc;AACd;AACA;AACA;AACA,UAAIR,OAAJ,EAAaN,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEE,OAAR;AAAiBC,QAAAA,OAAO,EAAEO;AAA1B,OAAD,CAAR;AACd;AACF,GA3BD;AAAA,CADF;;AA6BA,eAAef,GAAf","sourcesContent":["import axios from \"axios\";\nimport { usersAdded } from \"../users\";\nimport * as actions from '../api'\nconst api =\n  ({ dispatch, getState }) =>\n  (next) =>\n  async (action) => {\n    if (action.type !== actions.type) return next(action);\n    next(action); // if not placed here, this action will be swallowed and redux will move onto the actions defined below this\n    const { onSuccess, onError } = action.payload;\n    // if (onStart) dispatch({ type: onStart });\n    // next(action);\n    try {\n      const response = await axios.request({\n        baseURL: \"https://jsonplaceholder.typicode.com/users\",\n        // data, // optional\n      });\n      //general\n      // dispatch(action.payload.apiCallSuccess(response.data));\n      // sepcific\n      console.log(\"onSuccess\");\n      if (onSuccess) dispatch(usersAdded(response.data)); // this method will update the state of users\n      //   dispatch({ type: action.payload.onSuccess, payload: response.data });\n      console.log(\"users\", response.data);\n      next(action);\n    } catch (error) {\n      // general error message\n      //   dispatch(action.payload.apiCallFailed(error));\n      // specific error message\n      if (onError) dispatch({ type: onError, payload: error });\n    }\n  };\nexport default api;\n"]},"metadata":{},"sourceType":"module"}