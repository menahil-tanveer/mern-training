{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from \"reselect\";\nlet lastId = 0;\n/**\n * @description createSlice method replaces createAction & createReducer methods\n * Note that the name of reducers' properties can now be set to anything we want and it will be the only\n * place to update the name if we want to change it later in time unlike when we use createAction & createReducer\n *\n */\n\nconst slice = createSlice({\n  name: \"bugs\",\n  initialState: [],\n  reducers: {\n    bugAdded: (state, action) => {\n      state.push({\n        id: lastId++,\n        description: action.payload.description,\n        resolved: false\n      });\n    },\n    bugAssigned: (state, action) => {\n      const {\n        bugId,\n        userId\n      } = action.payload;\n      const index = state.findIndex(bug => bug.id === bugId); // set user id property in bugs array\n\n      state[index].userId = userId;\n    },\n    bugResolved: (state, action) => {\n      const index = state.findIndex(bug => bug.id === action.payload.id);\n      state[index].resolved = true;\n    }\n  }\n});\nexport const {\n  bugAdded,\n  bugResolved,\n  bugAssigned\n} = slice.actions;\nexport default slice.reducer; // Selectors\n// This method is a bit expensive to use in apps cause it takes almost 0.5 seconds to execute even when\n// the list of bugs has not chnaged.\n// therefore we use memoization method instead. For that install reselect pckg\n// export const getUnresolvedBugsOld = (state) =>\n//   state.entities.bugs.filter((bug) => !bug.resolved);\n\nexport const getUnresolvedBugs = createSelector(state => state.entities.bugs, bugs => bugs.filter(bug => !bug.resolved));\nexport const getBugByUserId = userId => createSelector(state => state.entities.bugs, bugs => bugs.filter(bug => bug.userId == userId));","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/bugs.js"],"names":["createSlice","createSelector","lastId","slice","name","initialState","reducers","bugAdded","state","action","push","id","description","payload","resolved","bugAssigned","bugId","userId","index","findIndex","bug","bugResolved","actions","reducer","getUnresolvedBugs","entities","bugs","filter","getBugByUserId"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,IAAIC,MAAM,GAAG,CAAb;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAGH,WAAW,CAAC;AACxBI,EAAAA,IAAI,EAAE,MADkB;AAExBC,EAAAA,YAAY,EAAE,EAFU;AAGxBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACE,IAAN,CAAW;AACTC,QAAAA,EAAE,EAAET,MAAM,EADD;AAETU,QAAAA,WAAW,EAAEH,MAAM,CAACI,OAAP,CAAeD,WAFnB;AAGTE,QAAAA,QAAQ,EAAE;AAHD,OAAX;AAKD,KAPO;AAQRC,IAAAA,WAAW,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC9B,YAAM;AAAEO,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAoBR,MAAM,CAACI,OAAjC;AACA,YAAMK,KAAK,GAAGV,KAAK,CAACW,SAAN,CAAiBC,GAAD,IAASA,GAAG,CAACT,EAAJ,KAAWK,KAApC,CAAd,CAF8B,CAG9B;;AACAR,MAAAA,KAAK,CAACU,KAAD,CAAL,CAAaD,MAAb,GAAsBA,MAAtB;AACD,KAbO;AAcRI,IAAAA,WAAW,EAAE,CAACb,KAAD,EAAQC,MAAR,KAAmB;AAC9B,YAAMS,KAAK,GAAGV,KAAK,CAACW,SAAN,CAAiBC,GAAD,IAASA,GAAG,CAACT,EAAJ,KAAWF,MAAM,CAACI,OAAP,CAAeF,EAAnD,CAAd;AACAH,MAAAA,KAAK,CAACU,KAAD,CAAL,CAAaJ,QAAb,GAAwB,IAAxB;AACD;AAjBO;AAHc,CAAD,CAAzB;AAuBA,OAAO,MAAM;AAAEP,EAAAA,QAAF;AAAYc,EAAAA,WAAZ;AAAyBN,EAAAA;AAAzB,IAAyCZ,KAAK,CAACmB,OAArD;AACP,eAAenB,KAAK,CAACoB,OAArB,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;;AAEA,OAAO,MAAMC,iBAAiB,GAAGvB,cAAc,CAC5CO,KAAD,IAAWA,KAAK,CAACiB,QAAN,CAAeC,IADmB,EAE5CA,IAAD,IAAUA,IAAI,CAACC,MAAL,CAAaP,GAAD,IAAS,CAACA,GAAG,CAACN,QAA1B,CAFmC,CAAxC;AAIP,OAAO,MAAMc,cAAc,GAAGX,MAAM,IAAIhB,cAAc,CACnDO,KAAD,IAAWA,KAAK,CAACiB,QAAN,CAAeC,IAD0B,EAEnDA,IAAD,IAAUA,IAAI,CAACC,MAAL,CAAaP,GAAD,IAASA,GAAG,CAACH,MAAJ,IAAcA,MAAnC,CAF0C,CAA/C","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from \"reselect\";\nlet lastId = 0;\n/**\n * @description createSlice method replaces createAction & createReducer methods\n * Note that the name of reducers' properties can now be set to anything we want and it will be the only\n * place to update the name if we want to change it later in time unlike when we use createAction & createReducer\n *\n */\nconst slice = createSlice({\n  name: \"bugs\",\n  initialState: [],\n  reducers: {\n    bugAdded: (state, action) => {\n      state.push({\n        id: lastId++,\n        description: action.payload.description,\n        resolved: false,\n      });\n    },\n    bugAssigned: (state, action) => {\n      const { bugId, userId } = action.payload;\n      const index = state.findIndex((bug) => bug.id === bugId);\n      // set user id property in bugs array\n      state[index].userId = userId;\n    },\n    bugResolved: (state, action) => {\n      const index = state.findIndex((bug) => bug.id === action.payload.id);\n      state[index].resolved = true;\n    },\n  },\n});\nexport const { bugAdded, bugResolved, bugAssigned } = slice.actions;\nexport default slice.reducer;\n\n// Selectors\n\n// This method is a bit expensive to use in apps cause it takes almost 0.5 seconds to execute even when\n// the list of bugs has not chnaged.\n// therefore we use memoization method instead. For that install reselect pckg\n\n// export const getUnresolvedBugsOld = (state) =>\n//   state.entities.bugs.filter((bug) => !bug.resolved);\n\nexport const getUnresolvedBugs = createSelector(\n  (state) => state.entities.bugs,\n  (bugs) => bugs.filter((bug) => !bug.resolved)\n);\nexport const getBugByUserId = userId => createSelector(\n  (state) => state.entities.bugs,\n  (bugs) => bugs.filter((bug) => bug.userId == userId)\n)\n"]},"metadata":{},"sourceType":"module"}