{"ast":null,"code":"// import { createStore, applyMiddleware } from \"redux\";\n// import reducer from \"./reducer\";\nimport logger from \"./store/middleware/logger\";\nimport func from \"./store/middleware/func\"; //always pass a refernce of the function donot call it i.e. write 'reducer' rather than 'reducer()'\n// This is how a middleware is applied without using redux toolkit\n// const store = createStore(reducer, applyMiddleware(logger));\n//REDUX TOOLKIT (simplifies REDUX code)\n\nimport { configureStore } from \"@reduxjs/toolkit\";\nconst store = configureStore({\n  //   reducer,\n  middleware: [logger(\"console\"), func] //note: the order of middlewares matter\n\n}); // passing a function in dispatch\n// here, type of this action is function\n\nstore.dispatch(() => {\n  // Call an API\n  // If promise is resolved, dispatch this\n  store.dispatch({\n    type: \"bugsReceived\",\n    bugs: [1, 2, 3]\n  }); // If promise is rejected, dispatch that\n});\nexport default store;","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store.js"],"names":["logger","func","configureStore","store","middleware","dispatch","type","bugs"],"mappings":"AAAA;AACA;AACA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,IAAP,MAAiB,yBAAjB,C,CAEA;AAEA;AACA;AAEA;;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,MAAMC,KAAK,GAAGD,cAAc,CAAC;AAC3B;AACAE,EAAAA,UAAU,EAAE,CAACJ,MAAM,CAAC,SAAD,CAAP,EAAoBC,IAApB,CAFe,CAEY;;AAFZ,CAAD,CAA5B,C,CAKA;AACA;;AACAE,KAAK,CAACE,QAAN,CAAe,MAAM;AACnB;AACA;AACAF,EAAAA,KAAK,CAACE,QAAN,CAAe;AAAEC,IAAAA,IAAI,EAAE,cAAR;AAAwBC,IAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAA9B,GAAf,EAHmB,CAInB;AACD,CALD;AAMA,eAAeJ,KAAf","sourcesContent":["// import { createStore, applyMiddleware } from \"redux\";\n// import reducer from \"./reducer\";\nimport logger from \"./store/middleware/logger\";\nimport func from \"./store/middleware/func\";\n\n//always pass a refernce of the function donot call it i.e. write 'reducer' rather than 'reducer()'\n\n// This is how a middleware is applied without using redux toolkit\n// const store = createStore(reducer, applyMiddleware(logger));\n\n//REDUX TOOLKIT (simplifies REDUX code)\nimport { configureStore } from \"@reduxjs/toolkit\";\nconst store = configureStore({\n  //   reducer,\n  middleware: [logger(\"console\"), func], //note: the order of middlewares matter\n});\n\n// passing a function in dispatch\n// here, type of this action is function\nstore.dispatch(() => {\n  // Call an API\n  // If promise is resolved, dispatch this\n  store.dispatch({ type: \"bugsReceived\", bugs: [1, 2, 3] });\n  // If promise is rejected, dispatch that\n});\nexport default store;\n"]},"metadata":{},"sourceType":"module"}