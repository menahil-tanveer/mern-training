{"ast":null,"code":"import { bugAdded, bugResolved, getUnresolvedBugs } from \"./store/bugs\";\nimport { projectAdded } from \"./store/projects\";\nimport configureStore from \"./store/configureStore\"; // import * as actions from \"./store/bugs\";\n\nconst store = configureStore(); // if written between dispatching actions, we will not be notified about the second action\n// const unsubscribe = store.subscribe(() => {\n//   console.log(\"store changed\", store.getState());\n// });\n// add bug\n\nstore.dispatch(projectAdded({\n  name: \"Project 1\"\n}));\nstore.dispatch(bugAdded({\n  description: \"bug 1\"\n}));\nstore.dispatch(bugAdded({\n  description: \"bug 2\"\n}));\nstore.dispatch(bugAdded({\n  description: \"bug 3\"\n})); // resolve\n\nstore.dispatch(bugResolved({\n  id: 1\n}));\nconsole.log(\"store:\", store);\nconsole.log(\"state:\", store.getState());\nconst unresolvedBugs = getUnresolvedBugs(store.getState()); // store.dispatch(\n//   actions.apiCallBegan({\n//     url: \"/bugs\",\n//     onSucces: \"bugsReceived\",\n//   })\n// );","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/index.js"],"names":["bugAdded","bugResolved","getUnresolvedBugs","projectAdded","configureStore","store","dispatch","name","description","id","console","log","getState","unresolvedBugs"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,iBAAhC,QAAyD,cAAzD;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,cAAP,MAA2B,wBAA3B,C,CACA;;AACA,MAAMC,KAAK,GAAGD,cAAc,EAA5B,C,CACA;AACA;AACA;AACA;AACA;;AACAC,KAAK,CAACC,QAAN,CAAeH,YAAY,CAAC;AAAEI,EAAAA,IAAI,EAAE;AAAR,CAAD,CAA3B;AAEAF,KAAK,CAACC,QAAN,CAAeN,QAAQ,CAAC;AAAEQ,EAAAA,WAAW,EAAE;AAAf,CAAD,CAAvB;AACAH,KAAK,CAACC,QAAN,CAAeN,QAAQ,CAAC;AAAEQ,EAAAA,WAAW,EAAE;AAAf,CAAD,CAAvB;AACAH,KAAK,CAACC,QAAN,CAAeN,QAAQ,CAAC;AAAEQ,EAAAA,WAAW,EAAE;AAAf,CAAD,CAAvB,E,CACA;;AACAH,KAAK,CAACC,QAAN,CAAeL,WAAW,CAAC;AAAEQ,EAAAA,EAAE,EAAE;AAAN,CAAD,CAA1B;AACAC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBN,KAAtB;AACAK,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBN,KAAK,CAACO,QAAN,EAAtB;AACA,MAAMC,cAAc,GAAGX,iBAAiB,CAACG,KAAK,CAACO,QAAN,EAAD,CAAxC,C,CACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { bugAdded, bugResolved, getUnresolvedBugs } from \"./store/bugs\";\nimport { projectAdded } from \"./store/projects\";\nimport configureStore from \"./store/configureStore\";\n// import * as actions from \"./store/bugs\";\nconst store = configureStore();\n// if written between dispatching actions, we will not be notified about the second action\n// const unsubscribe = store.subscribe(() => {\n//   console.log(\"store changed\", store.getState());\n// });\n// add bug\nstore.dispatch(projectAdded({ name: \"Project 1\" }));\n\nstore.dispatch(bugAdded({ description: \"bug 1\" }));\nstore.dispatch(bugAdded({ description: \"bug 2\" }));\nstore.dispatch(bugAdded({ description: \"bug 3\" }));\n// resolve\nstore.dispatch(bugResolved({ id: 1 }));\nconsole.log(\"store:\", store);\nconsole.log(\"state:\", store.getState());\nconst unresolvedBugs = getUnresolvedBugs(store.getState())\n// store.dispatch(\n//   actions.apiCallBegan({\n//     url: \"/bugs\",\n//     onSucces: \"bugsReceived\",\n//   })\n// );\n"]},"metadata":{},"sourceType":"module"}