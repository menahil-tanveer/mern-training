{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport reducer from \"./reducer\";\nimport logger from \"./store/middleware/logger\";\nimport func from \"./store/middleware/func\"; //always pass a refernce of the function donot call it i.e. write 'reducer' rather than 'reducer()'\n// This is how a middleware is applied without using redux toolkit\n// const store = createStore(reducer, applyMiddleware(logger));\n//REDUX TOOLKIT (simplifies REDUX code)\n\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nconst store = configureStore({\n  reducer,\n  middleware: [logger(\"console\"), ...getDefaultMiddleware] //note: the order of middlewares matter\n\n}); // passing a function in dispatch\n// here, type of this action is function\n\nstore.dispatch((dispatch, getState) => {\n  // Call an API\n  // If promise is resolved, dispatch this\n  dispatch({\n    type: \"bugsReceived\",\n    bugs: [1, 2, 3]\n  });\n  console.log(\"getState\", getState()); // If promise is rejected, dispatch that\n});\nexport default store;","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store.js"],"names":["createStore","applyMiddleware","reducer","logger","func","configureStore","getDefaultMiddleware","store","middleware","dispatch","getState","type","bugs","console","log"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,IAAP,MAAiB,yBAAjB,C,CAEA;AAEA;AACA;AAEA;;AACA,SAASC,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,MAAMC,KAAK,GAAGF,cAAc,CAAC;AAC3BH,EAAAA,OAD2B;AAE3BM,EAAAA,UAAU,EAAE,CAACL,MAAM,CAAC,SAAD,CAAP,EAAoB,GAAGG,oBAAvB,CAFe,CAE+B;;AAF/B,CAAD,CAA5B,C,CAKA;AACA;;AACAC,KAAK,CAACE,QAAN,CAAe,CAACA,QAAD,EAAWC,QAAX,KAAwB;AACrC;AACA;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE,cAAR;AAAwBC,IAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAA9B,GAAD,CAAR;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,QAAQ,EAAhC,EAJqC,CAKrC;AACD,CAND;AAOA,eAAeH,KAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport reducer from \"./reducer\";\nimport logger from \"./store/middleware/logger\";\nimport func from \"./store/middleware/func\";\n\n//always pass a refernce of the function donot call it i.e. write 'reducer' rather than 'reducer()'\n\n// This is how a middleware is applied without using redux toolkit\n// const store = createStore(reducer, applyMiddleware(logger));\n\n//REDUX TOOLKIT (simplifies REDUX code)\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nconst store = configureStore({\n  reducer,\n  middleware: [logger(\"console\"), ...getDefaultMiddleware], //note: the order of middlewares matter\n});\n\n// passing a function in dispatch\n// here, type of this action is function\nstore.dispatch((dispatch, getState) => {\n  // Call an API\n  // If promise is resolved, dispatch this\n  dispatch({ type: \"bugsReceived\", bugs: [1, 2, 3] });\n  console.log(\"getState\", getState());\n  // If promise is rejected, dispatch that\n});\nexport default store;\n"]},"metadata":{},"sourceType":"module"}