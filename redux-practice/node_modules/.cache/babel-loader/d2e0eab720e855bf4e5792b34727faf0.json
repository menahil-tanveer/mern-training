{"ast":null,"code":"import { createAction, createReducer, createSlice } from \"@reduxjs/toolkit\";\nconst slice = createSlice({\n  name: \"bugs\",\n  initialState: {\n    list: [],\n    loading: false,\n    lastFetch: null\n  },\n  //   // ---------------------------- REDUCERS--------------------------\n  reducers: {\n    bugsRequested: (bugs, action) => {\n      bugs.loading = true;\n    },\n    bugsReceived: (bugs, action) => {\n      bugs.list = action.payload;\n      bugs.loading = false;\n    }\n  }\n});\nexport const {\n  bugsRequested,\n  bugsReceived\n} = slice.actions;\nexport default slice.reducer;\nconst url = \"bugs/bugsRequested\";\nexport const loadBugs = () => {\n  apiCallBegan({\n    url,\n    onStart: bugsRequested.type,\n    onSuccess: bugsReceived.type\n  });\n};","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/bugs.js"],"names":["createAction","createReducer","createSlice","slice","name","initialState","list","loading","lastFetch","reducers","bugsRequested","bugs","action","bugsReceived","payload","actions","reducer","url","loadBugs","apiCallBegan","onStart","type","onSuccess"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,WAAtC,QAAyD,kBAAzD;AAEA,MAAMC,KAAK,GAAGD,WAAW,CAAC;AACxBE,EAAAA,IAAI,EAAE,MADkB;AAExBC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE,EADM;AAEZC,IAAAA,OAAO,EAAE,KAFG;AAGZC,IAAAA,SAAS,EAAE;AAHC,GAFU;AAO1B;AACEC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC/BD,MAAAA,IAAI,CAACJ,OAAL,GAAe,IAAf;AACD,KAHO;AAIRM,IAAAA,YAAY,EAAE,CAACF,IAAD,EAAOC,MAAP,KAAkB;AAC9BD,MAAAA,IAAI,CAACL,IAAL,GAAYM,MAAM,CAACE,OAAnB;AACAH,MAAAA,IAAI,CAACJ,OAAL,GAAe,KAAf;AACD;AAPO;AARc,CAAD,CAAzB;AAmBA,OAAO,MAAM;AAAEG,EAAAA,aAAF;AAAiBG,EAAAA;AAAjB,IAAkCV,KAAK,CAACY,OAA9C;AACP,eAAeZ,KAAK,CAACa,OAArB;AAEA,MAAMC,GAAG,GAAG,oBAAZ;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5BC,EAAAA,YAAY,CAAC;AACXF,IAAAA,GADW;AAEXG,IAAAA,OAAO,EAAEV,aAAa,CAACW,IAFZ;AAGXC,IAAAA,SAAS,EAAET,YAAY,CAACQ;AAHb,GAAD,CAAZ;AAKD,CANM","sourcesContent":["import { createAction, createReducer, createSlice } from \"@reduxjs/toolkit\";\n\nconst slice = createSlice({\n  name: \"bugs\",\n  initialState: {\n    list: [],\n    loading: false,\n    lastFetch: null,\n  },\n//   // ---------------------------- REDUCERS--------------------------\n  reducers: {\n    bugsRequested: (bugs, action) => {\n      bugs.loading = true;\n    },\n    bugsReceived: (bugs, action) => {\n      bugs.list = action.payload;\n      bugs.loading = false;\n    },\n  },\n});\n\nexport const { bugsRequested, bugsReceived } = slice.actions;\nexport default slice.reducer;\n\nconst url = \"bugs/bugsRequested\";\nexport const loadBugs = () => {\n  apiCallBegan({\n    url,\n    onStart: bugsRequested.type,\n    onSuccess: bugsReceived.type,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}