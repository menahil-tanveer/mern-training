{"ast":null,"code":"import { bugAdded, bugResolved } from \"./store/bugs\";\nimport { projectAdded } from \"./store/project\";\nimport configureStore from \"./store/configureStore\";\nimport * as actions from \"./store/bugs\";\nconst store = configureStore(); // if written between dispatching actions, we will not be notified about the second action\n// const unsubscribe = store.subscribe(() => {\n//   console.log(\"store changed\", store.getState());\n// });\n// add bug\n\nstore.dispatch(bugAdded({\n  description: \"bug 1\"\n}));\nstore.dispatch(bugAdded({\n  description: \"bug 2\"\n}));\nstore.dispatch(bugAdded({\n  description: \"bug 3\"\n})); // resolve\n\nstore.dispatch(bugResolved({\n  id: 1\n}));\nconsole.log(\"store:\", store);\nconsole.log(\"state:\", store.getState()); // store.dispatch(\n//   actions.apiCallBegan({\n//     url: \"/bugs\",\n//     onSucces: \"bugsReceived\",\n//   })\n// );","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/index.js"],"names":["bugAdded","bugResolved","projectAdded","configureStore","actions","store","dispatch","description","id","console","log","getState"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,cAAtC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AACA,MAAMC,KAAK,GAAGF,cAAc,EAA5B,C,CACA;AACA;AACA;AACA;AACA;;AACAE,KAAK,CAACC,QAAN,CAAeN,QAAQ,CAAC;AAAEO,EAAAA,WAAW,EAAE;AAAf,CAAD,CAAvB;AACAF,KAAK,CAACC,QAAN,CAAeN,QAAQ,CAAC;AAAEO,EAAAA,WAAW,EAAE;AAAf,CAAD,CAAvB;AACAF,KAAK,CAACC,QAAN,CAAeN,QAAQ,CAAC;AAAEO,EAAAA,WAAW,EAAE;AAAf,CAAD,CAAvB,E,CACA;;AACAF,KAAK,CAACC,QAAN,CAAeL,WAAW,CAAC;AAAEO,EAAAA,EAAE,EAAE;AAAN,CAAD,CAA1B;AACAC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,KAAtB;AACAI,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,KAAK,CAACM,QAAN,EAAtB,E,CACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { bugAdded, bugResolved } from \"./store/bugs\";\nimport { projectAdded } from \"./store/project\";\n\nimport configureStore from \"./store/configureStore\";\nimport * as actions from \"./store/bugs\";\nconst store = configureStore();\n// if written between dispatching actions, we will not be notified about the second action\n// const unsubscribe = store.subscribe(() => {\n//   console.log(\"store changed\", store.getState());\n// });\n// add bug\nstore.dispatch(bugAdded({ description: \"bug 1\" }));\nstore.dispatch(bugAdded({ description: \"bug 2\" }));\nstore.dispatch(bugAdded({ description: \"bug 3\" }));\n// resolve\nstore.dispatch(bugResolved({ id: 1 }));\nconsole.log(\"store:\", store);\nconsole.log(\"state:\", store.getState());\n// store.dispatch(\n//   actions.apiCallBegan({\n//     url: \"/bugs\",\n//     onSucces: \"bugsReceived\",\n//   })\n// );\n"]},"metadata":{},"sourceType":"module"}