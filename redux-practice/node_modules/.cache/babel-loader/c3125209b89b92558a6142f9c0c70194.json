{"ast":null,"code":"/**\n *\n * @param {*} store the store over here is not the actual store but an object that looks like it. This one only has\n * getState & dispatch properties\n * @param {*} next i.e. a refernce to next middleware function & if its the only one then reducer that\n * is going to handle this action\n * @param {*} action i.e. the action that is dispatched\n */\nconst logger = params => store => next => action => {\n  console.log(\"logging\", params); // this will lead to reducer function which will alter the state\n\n  next(action);\n};\n\nexport default logger;","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/middleware/logger.js"],"names":["logger","params","store","next","action","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAM,GAAIC,MAAD,IAAaC,KAAD,IAAYC,IAAD,IAAWC,MAAD,IAAY;AAC1DC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBL,MAAvB,EAD0D,CAE1D;;AACAE,EAAAA,IAAI,CAACC,MAAD,CAAJ;AACD,CAJD;;AAKA,eAAeJ,MAAf","sourcesContent":["/**\n *\n * @param {*} store the store over here is not the actual store but an object that looks like it. This one only has\n * getState & dispatch properties\n * @param {*} next i.e. a refernce to next middleware function & if its the only one then reducer that\n * is going to handle this action\n * @param {*} action i.e. the action that is dispatched\n */\nconst logger = (params) => (store) => (next) => (action) => {\n  console.log(\"logging\", params);\n  // this will lead to reducer function which will alter the state\n  next(action);\n};\nexport default logger;\n"]},"metadata":{},"sourceType":"module"}