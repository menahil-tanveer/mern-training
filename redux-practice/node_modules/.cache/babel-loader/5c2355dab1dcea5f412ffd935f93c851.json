{"ast":null,"code":"import axios from \"axios\";\n\nconst api = _ref => {\n  let {\n    dispatch\n  } = _ref;\n  return next => async action => {\n    if (action !== \"apiCallBegan\") return next(action);\n    next(action); // if not placed here, the original action will be swallowed and redux will move onto the actions defined below this\n\n    const {\n      url,\n      method,\n      data,\n      onStart,\n      onSuccess,\n      onError\n    } = action;\n    if (onStart) dispatch({\n      type: onStart\n    }); // next(action);\n\n    try {\n      const response = await axios.request({\n        baseURL: \"https://jsonplaceholder.typicode.com\",\n        url: \"/users\",\n        method,\n        data\n      }); //general\n      //   dispatch(action.payload.apiCallSuccess(response.data));\n      // sepcific\n\n      dispatch({\n        type: onSuccess,\n        payload: response.data\n      });\n    } catch (error) {\n      // general error message\n      //   dispatch(action.payload.apiCallFailed(error));\n      // specific error message\n      dispatch({\n        type: onError,\n        payload: error\n      });\n    }\n  };\n};\n\nexport default api;","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/middleware/api.js"],"names":["axios","api","dispatch","next","action","url","method","data","onStart","onSuccess","onError","type","response","request","baseURL","payload","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,GAAG,GACP;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,SACCC,IAAD,IACA,MAAOC,MAAP,IAAkB;AAChB,QAAIA,MAAM,KAAK,cAAf,EAA+B,OAAOD,IAAI,CAACC,MAAD,CAAX;AAC/BD,IAAAA,IAAI,CAACC,MAAD,CAAJ,CAFgB,CAEF;;AACd,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,MAAP;AAAeC,MAAAA,IAAf;AAAqBC,MAAAA,OAArB;AAA8BC,MAAAA,SAA9B;AAAyCC,MAAAA;AAAzC,QAAqDN,MAA3D;AACA,QAAII,OAAJ,EAAaN,QAAQ,CAAC;AAAES,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAR,CAJG,CAKhB;;AACA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMZ,KAAK,CAACa,OAAN,CAAc;AACnCC,QAAAA,OAAO,EAAE,sCAD0B;AAEnCT,QAAAA,GAAG,EAAE,QAF8B;AAGnCC,QAAAA,MAHmC;AAInCC,QAAAA;AAJmC,OAAd,CAAvB,CADE,CAOF;AACA;AACA;;AACAL,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEF,SAAR;AAAmBM,QAAAA,OAAO,EAAEH,QAAQ,CAACL;AAArC,OAAD,CAAR;AACD,KAXD,CAWE,OAAOS,KAAP,EAAc;AACd;AACA;AACA;AACAd,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAED,OAAR;AAAiBK,QAAAA,OAAO,EAAEC;AAA1B,OAAD,CAAR;AACD;AACF,GAzBD;AAAA,CADF;;AA2BA,eAAef,GAAf","sourcesContent":["import axios from \"axios\";\nconst api =\n  ({ dispatch }) =>\n  (next) =>\n  async (action) => {\n    if (action !== \"apiCallBegan\") return next(action);\n    next(action); // if not placed here, the original action will be swallowed and redux will move onto the actions defined below this\n    const { url, method, data, onStart, onSuccess, onError } = action;\n    if (onStart) dispatch({ type: onStart });\n    // next(action);\n    try {\n      const response = await axios.request({\n        baseURL: \"https://jsonplaceholder.typicode.com\",\n        url: \"/users\",\n        method,\n        data,\n      });\n      //general\n      //   dispatch(action.payload.apiCallSuccess(response.data));\n      // sepcific\n      dispatch({ type: onSuccess, payload: response.data });\n    } catch (error) {\n      // general error message\n      //   dispatch(action.payload.apiCallFailed(error));\n      // specific error message\n      dispatch({ type: onError, payload: error });\n    }\n  };\nexport default api;\n"]},"metadata":{},"sourceType":"module"}