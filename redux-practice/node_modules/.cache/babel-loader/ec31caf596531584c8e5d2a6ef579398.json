{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from \"reselect\";\nlet lastId = 0;\n/**\n * @description createSlice method replaces createAction & createReducer methods\n * Note that the name of reducers' properties can now be set to anything we want and it will be the only\n * place to update the name if we want to change it later in time unlike when we use createAction & createReducer\n *\n */\n\nconst slice = createSlice({\n  name: \"bugs\",\n  initialState: [],\n  reducers: {\n    bugAdded: (state, action) => {\n      state.push({\n        id: lastId++,\n        description: action.payload.description,\n        resolved: false\n      });\n    },\n    bugAssigned: {},\n    bugResolved: (state, action) => {\n      const index = state.findIndex(bug => bug.id === action.payload.id);\n      state[index].resolved = true;\n    }\n  }\n});\nexport const {\n  bugAdded,\n  bugResolved\n} = slice.actions;\nexport default slice.reducer; // Selectors\n// This method is a bit expensive to use in apps cause it takes almost 0.5 seconds to execute even when\n// the list of bugs has not chnaged.\n// therefore we use memoization method instead. For that install reselect pckg\n// export const getUnresolvedBugsOld = (state) =>\n//   state.entities.bugs.filter((bug) => !bug.resolved);\n\nexport const getUnresolvedBugs = createSelector(state => state.entities.bugs, bugs => bugs.filter(bug => !bug.resolved));","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/bugs.js"],"names":["createSlice","createSelector","lastId","slice","name","initialState","reducers","bugAdded","state","action","push","id","description","payload","resolved","bugAssigned","bugResolved","index","findIndex","bug","actions","reducer","getUnresolvedBugs","entities","bugs","filter"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,IAAIC,MAAM,GAAG,CAAb;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAGH,WAAW,CAAC;AACxBI,EAAAA,IAAI,EAAE,MADkB;AAExBC,EAAAA,YAAY,EAAE,EAFU;AAGxBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACE,IAAN,CAAW;AACTC,QAAAA,EAAE,EAAET,MAAM,EADD;AAETU,QAAAA,WAAW,EAAEH,MAAM,CAACI,OAAP,CAAeD,WAFnB;AAGTE,QAAAA,QAAQ,EAAE;AAHD,OAAX;AAKD,KAPO;AAQRC,IAAAA,WAAW,EAAC,EARJ;AAURC,IAAAA,WAAW,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC9B,YAAMQ,KAAK,GAAGT,KAAK,CAACU,SAAN,CAAiBC,GAAD,IAASA,GAAG,CAACR,EAAJ,KAAWF,MAAM,CAACI,OAAP,CAAeF,EAAnD,CAAd;AACAH,MAAAA,KAAK,CAACS,KAAD,CAAL,CAAaH,QAAb,GAAwB,IAAxB;AACD;AAbO;AAHc,CAAD,CAAzB;AAmBA,OAAO,MAAM;AAAEP,EAAAA,QAAF;AAAYS,EAAAA;AAAZ,IAA4Bb,KAAK,CAACiB,OAAxC;AACP,eAAejB,KAAK,CAACkB,OAArB,C,CACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,OAAO,MAAMC,iBAAiB,GAAGrB,cAAc,CAC5CO,KAAD,IAAWA,KAAK,CAACe,QAAN,CAAeC,IADmB,EAE5CA,IAAD,IAAUA,IAAI,CAACC,MAAL,CAAaN,GAAD,IAAS,CAACA,GAAG,CAACL,QAA1B,CAFmC,CAAxC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { createSelector } from \"reselect\";\nlet lastId = 0;\n/**\n * @description createSlice method replaces createAction & createReducer methods\n * Note that the name of reducers' properties can now be set to anything we want and it will be the only\n * place to update the name if we want to change it later in time unlike when we use createAction & createReducer\n *\n */\nconst slice = createSlice({\n  name: \"bugs\",\n  initialState: [],\n  reducers: {\n    bugAdded: (state, action) => {\n      state.push({\n        id: lastId++,\n        description: action.payload.description,\n        resolved: false,\n      });\n    },\n    bugAssigned:{},\n    \n    bugResolved: (state, action) => {\n      const index = state.findIndex((bug) => bug.id === action.payload.id);\n      state[index].resolved = true;\n    },\n  },\n});\nexport const { bugAdded, bugResolved } = slice.actions;\nexport default slice.reducer;\n// Selectors\n// This method is a bit expensive to use in apps cause it takes almost 0.5 seconds to execute even when\n// the list of bugs has not chnaged.\n// therefore we use memoization method instead. For that install reselect pckg\n\n// export const getUnresolvedBugsOld = (state) =>\n//   state.entities.bugs.filter((bug) => !bug.resolved);\n\nexport const getUnresolvedBugs = createSelector(\n  (state) => state.entities.bugs,\n  (bugs) => bugs.filter((bug) => !bug.resolved)\n);\n"]},"metadata":{},"sourceType":"module"}