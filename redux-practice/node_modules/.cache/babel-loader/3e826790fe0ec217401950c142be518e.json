{"ast":null,"code":"import { createAction } from \"@reduxjs/toolkit\"; // ACTION TYPES\n// const BUG_ADDED = \"bugAdded\";\n// const BUG_REMOVED = \"bugRemoved\";\n// const BUG_RESOLVED = \"bugResolved\";\n// ACTION CREATORS: manual approach\n// export const bugAdded = (description) => ({\n//   type: BUG_ADDED,\n//   payload: {\n//     description,\n//   },\n// });\n// ACTION CREATORS: concise approach using redux toolkit\n// createAction method creates an action creator\n// createAction has a type property that can be used to return action type (it can also be done using toString method)\n// Example:\n// const apiCallBegan = createAction(\"api/callBegan\");\n// console.log(apiCallBegan.type) || console.log(apiCallBegan.toString())\n// to define payload:\n// console.log(apiCallBegan({id:1})) this will add id as a property of payload obj\n\nexport const bugAdded = createAction(\"bugAdded\");\nexport const bugResolved = createAction(\"bugResolved\");\nexport const bugRemoved = createAction(\"bugRemoved\");\nexport const apiCallBegan = createAction(\"api/callBegan\");\nexport const apiCallSuccess = createAction(\"api/callSuccess\");\nexport const apiCallFailed = createAction(\"api/callFailed\"); // REDUCER\n// Note: reducer must always be a default export when following ducks pattern\n\nlet lastId = 0;\n\nfunction reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case bugAdded.type:\n      return [...state, {\n        id: lastId++,\n        description: action.payload.description,\n        resolved: false\n      }];\n\n    case bugRemoved.type:\n      return state.filter(bug => bug.id !== action.payload.id);\n\n    case bugResolved.type:\n      return state.map(bug => bug.id !== action.payload.id ? bug : { ...bug,\n        resolved: true\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer; // CREATING REDUCER USING TOOLKIT\n// const slice = createSlice({\n//   name: \"bugs\",\n//   initialState: {\n//     list: [],\n//     loading: false,\n//     lastFetch: null,\n//   },\n//   // ---------------------------- REDUCERS--------------------------\n//   reducers: {\n//     bugsRequested: (bugs, action) => {\n//       bugs.loading = true;\n//     },\n//     bugsReceived: (bugs, action) => {\n//       bugs.list = action.payload;\n//       bugs.loading = false;\n//     },\n//   },\n// });\n// export const { bugsRequested, bugsReceived } = slice.actions;\n// export default slice.reducer;\n// const url = \"bugs/bugsRequested\";\n// export const loadBugs = () => {\n//   apiCallBegan({\n//     url,\n//     onStart: bugsRequested.type,\n//     onSuccess: bugsReceived.type,\n//   });\n// };","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/bugs.js"],"names":["createAction","bugAdded","bugResolved","bugRemoved","apiCallBegan","apiCallSuccess","apiCallFailed","lastId","reducer","state","action","type","id","description","payload","resolved","filter","bug","map"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAGD,YAAY,CAAC,UAAD,CAA7B;AACP,OAAO,MAAME,WAAW,GAAGF,YAAY,CAAC,aAAD,CAAhC;AACP,OAAO,MAAMG,UAAU,GAAGH,YAAY,CAAC,YAAD,CAA/B;AAEP,OAAO,MAAMI,YAAY,GAAGJ,YAAY,CAAC,eAAD,CAAjC;AACP,OAAO,MAAMK,cAAc,GAAGL,YAAY,CAAC,iBAAD,CAAnC;AACP,OAAO,MAAMM,aAAa,GAAGN,YAAY,CAAC,gBAAD,CAAlC,C,CACP;AACA;;AACA,IAAIO,MAAM,GAAG,CAAb;;AACA,SAASC,OAAT,GAAqC;AAAA,MAApBC,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AACnC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,QAAQ,CAACU,IAAd;AACE,aAAO,CACL,GAAGF,KADE,EAEL;AACEG,QAAAA,EAAE,EAAEL,MAAM,EADZ;AAEEM,QAAAA,WAAW,EAAEH,MAAM,CAACI,OAAP,CAAeD,WAF9B;AAGEE,QAAAA,QAAQ,EAAE;AAHZ,OAFK,CAAP;;AAQF,SAAKZ,UAAU,CAACQ,IAAhB;AACE,aAAOF,KAAK,CAACO,MAAN,CAAcC,GAAD,IAASA,GAAG,CAACL,EAAJ,KAAWF,MAAM,CAACI,OAAP,CAAeF,EAAhD,CAAP;;AACF,SAAKV,WAAW,CAACS,IAAjB;AACE,aAAOF,KAAK,CAACS,GAAN,CAAWD,GAAD,IACfA,GAAG,CAACL,EAAJ,KAAWF,MAAM,CAACI,OAAP,CAAeF,EAA1B,GAA+BK,GAA/B,GAAqC,EAAE,GAAGA,GAAL;AAAUF,QAAAA,QAAQ,EAAE;AAApB,OADhC,CAAP;;AAGF;AACE,aAAON,KAAP;AAjBJ;AAmBD;;AACD,eAAeD,OAAf,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n// ACTION TYPES\n// const BUG_ADDED = \"bugAdded\";\n// const BUG_REMOVED = \"bugRemoved\";\n// const BUG_RESOLVED = \"bugResolved\";\n// ACTION CREATORS: manual approach\n// export const bugAdded = (description) => ({\n//   type: BUG_ADDED,\n//   payload: {\n//     description,\n//   },\n// });\n// ACTION CREATORS: concise approach using redux toolkit\n// createAction method creates an action creator\n// createAction has a type property that can be used to return action type (it can also be done using toString method)\n// Example:\n// const apiCallBegan = createAction(\"api/callBegan\");\n// console.log(apiCallBegan.type) || console.log(apiCallBegan.toString())\n// to define payload:\n// console.log(apiCallBegan({id:1})) this will add id as a property of payload obj\nexport const bugAdded = createAction(\"bugAdded\");\nexport const bugResolved = createAction(\"bugResolved\");\nexport const bugRemoved = createAction(\"bugRemoved\");\n\nexport const apiCallBegan = createAction(\"api/callBegan\");\nexport const apiCallSuccess = createAction(\"api/callSuccess\");\nexport const apiCallFailed = createAction(\"api/callFailed\");\n// REDUCER\n// Note: reducer must always be a default export when following ducks pattern\nlet lastId = 0;\nfunction reducer(state = [], action) {\n  switch (action.type) {\n    case bugAdded.type:\n      return [\n        ...state,\n        {\n          id: lastId++,\n          description: action.payload.description,\n          resolved: false,\n        },\n      ];\n    case bugRemoved.type:\n      return state.filter((bug) => bug.id !== action.payload.id);\n    case bugResolved.type:\n      return state.map((bug) =>\n        bug.id !== action.payload.id ? bug : { ...bug, resolved: true }\n      );\n    default:\n      return state;\n  }\n}\nexport default reducer;\n// CREATING REDUCER USING TOOLKIT\n\n// const slice = createSlice({\n//   name: \"bugs\",\n//   initialState: {\n//     list: [],\n//     loading: false,\n//     lastFetch: null,\n//   },\n//   // ---------------------------- REDUCERS--------------------------\n//   reducers: {\n//     bugsRequested: (bugs, action) => {\n//       bugs.loading = true;\n//     },\n//     bugsReceived: (bugs, action) => {\n//       bugs.list = action.payload;\n//       bugs.loading = false;\n//     },\n//   },\n// });\n\n// export const { bugsRequested, bugsReceived } = slice.actions;\n// export default slice.reducer;\n\n// const url = \"bugs/bugsRequested\";\n// export const loadBugs = () => {\n//   apiCallBegan({\n//     url,\n//     onStart: bugsRequested.type,\n//     onSuccess: bugsReceived.type,\n//   });\n// };\n"]},"metadata":{},"sourceType":"module"}