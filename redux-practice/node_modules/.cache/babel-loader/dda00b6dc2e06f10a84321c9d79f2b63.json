{"ast":null,"code":"import { bugAdded, bugResolved, getUnresolvedBugs, getBugByUserId, bugAssigned } from \"./store/bugs\";\nimport { projectAdded } from \"./store/projects\";\nimport { userAdded } from \"./store/users\";\nimport configureStore from \"./store/configureStore\";\nconst store = configureStore(); // if written between dispatching actions, we will not be notified about the second action\n// const unsubscribe = store.subscribe(() => {\n//   console.log(\"store changed\", store.getState());\n// });\n// add bug\n// store.dispatch(projectAdded({ name: \"Project 1\" }));\n// store.dispatch(bugAdded({ description: \"bug 1\" }));\n// store.dispatch(bugAdded({ description: \"bug 2\" }));\n// store.dispatch(bugAdded({ description: \"bug 3\" }));\n// dispatching an action inside an action\n\nstore.dispatch(() => {\n  store.dispatch({\n    type: \"bugsReceived\",\n    bugs: [\"sample 1\", \"sample 2\", \"sample 3\"]\n  });\n  console.log(store.getState());\n}); // resolve\n\nstore.dispatch(bugResolved({\n  id: 1\n}));\nstore.dispatch(userAdded({\n  name: \"user 1\"\n}));\nstore.dispatch(userAdded({\n  name: \"user 2\"\n}));\nstore.dispatch(bugAssigned({\n  bugId: 1,\n  userId: 1\n}));\nconsole.log(\"store:\", store);\nconsole.log(\"state:\", store.getState());\nconst unresolvedBugs = getUnresolvedBugs(store.getState());\nconsole.log(\"unresolvedBugs\", unresolvedBugs);\nconst bugs = getBugByUserId(1)(store.getState());\nconsole.log(\"Get bug by user id::\", bugs); // store.dispatch(\n//   actions.apiCallBegan({\n//     url: \"/bugs\",\n//     onSucces: \"bugsReceived\",\n//   })\n// );","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/index.js"],"names":["bugAdded","bugResolved","getUnresolvedBugs","getBugByUserId","bugAssigned","projectAdded","userAdded","configureStore","store","dispatch","type","bugs","console","log","getState","id","name","bugId","userId","unresolvedBugs"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,iBAHF,EAIEC,cAJF,EAKEC,WALF,QAMO,cANP;AAOA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,QAA0B,eAA1B;AAEA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,MAAMC,KAAK,GAAGD,cAAc,EAA5B,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,KAAK,CAACC,QAAN,CAAe,MAAM;AACnBD,EAAAA,KAAK,CAACC,QAAN,CAAe;AACbC,IAAAA,IAAI,EAAE,cADO;AAEbC,IAAAA,IAAI,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB;AAFO,GAAf;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACM,QAAN,EAAZ;AACD,CAND,E,CAQA;;AACAN,KAAK,CAACC,QAAN,CAAeR,WAAW,CAAC;AAAEc,EAAAA,EAAE,EAAE;AAAN,CAAD,CAA1B;AACAP,KAAK,CAACC,QAAN,CAAeH,SAAS,CAAC;AAAEU,EAAAA,IAAI,EAAE;AAAR,CAAD,CAAxB;AACAR,KAAK,CAACC,QAAN,CAAeH,SAAS,CAAC;AAAEU,EAAAA,IAAI,EAAE;AAAR,CAAD,CAAxB;AACAR,KAAK,CAACC,QAAN,CAAeL,WAAW,CAAC;AAAEa,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,MAAM,EAAE;AAApB,CAAD,CAA1B;AAEAN,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,KAAtB;AACAI,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,KAAK,CAACM,QAAN,EAAtB;AACA,MAAMK,cAAc,GAAGjB,iBAAiB,CAACM,KAAK,CAACM,QAAN,EAAD,CAAxC;AACAF,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BM,cAA9B;AACA,MAAMR,IAAI,GAAGR,cAAc,CAAC,CAAD,CAAd,CAAkBK,KAAK,CAACM,QAAN,EAAlB,CAAb;AACAF,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,IAApC,E,CACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {\n  bugAdded,\n  bugResolved,\n  getUnresolvedBugs,\n  getBugByUserId,\n  bugAssigned,\n} from \"./store/bugs\";\nimport { projectAdded } from \"./store/projects\";\nimport { userAdded } from \"./store/users\";\n\nimport configureStore from \"./store/configureStore\";\nconst store = configureStore();\n// if written between dispatching actions, we will not be notified about the second action\n// const unsubscribe = store.subscribe(() => {\n//   console.log(\"store changed\", store.getState());\n// });\n// add bug\n// store.dispatch(projectAdded({ name: \"Project 1\" }));\n// store.dispatch(bugAdded({ description: \"bug 1\" }));\n// store.dispatch(bugAdded({ description: \"bug 2\" }));\n// store.dispatch(bugAdded({ description: \"bug 3\" }));\n// dispatching an action inside an action\nstore.dispatch(() => {\n  store.dispatch({\n    type: \"bugsReceived\",\n    bugs: [\"sample 1\", \"sample 2\", \"sample 3\"],\n  });\n  console.log(store.getState());\n});\n\n// resolve\nstore.dispatch(bugResolved({ id: 1 }));\nstore.dispatch(userAdded({ name: \"user 1\" }));\nstore.dispatch(userAdded({ name: \"user 2\" }));\nstore.dispatch(bugAssigned({ bugId: 1, userId: 1 }));\n\nconsole.log(\"store:\", store);\nconsole.log(\"state:\", store.getState());\nconst unresolvedBugs = getUnresolvedBugs(store.getState());\nconsole.log(\"unresolvedBugs\", unresolvedBugs);\nconst bugs = getBugByUserId(1)(store.getState());\nconsole.log(\"Get bug by user id::\", bugs);\n// store.dispatch(\n//   actions.apiCallBegan({\n//     url: \"/bugs\",\n//     onSucces: \"bugsReceived\",\n//   })\n// );\n"]},"metadata":{},"sourceType":"module"}