{"ast":null,"code":"import { createAction, createReducer, createSlice } from \"@reduxjs/toolkit\"; // ACTION TYPES\n// const BUG_ADDED = \"bugAdded\";\n// const BUG_REMOVED = \"bugRemoved\";\n// const BUG_RESOLVED = \"bugResolved\";\n// ACTION CREATORS: manual approach\n// export const bugAdded = (description) => ({\n//   type: BUG_ADDED,\n//   payload: {\n//     description,\n//   },\n// });\n// ACTION CREATORS: concise approach using redux toolkit\n// createAction method creates an action creator\n// createAction has a type property that can be used to return action type (it can also be done using toString method)\n// Example:\n// const apiCallBegan = createAction(\"api/callBegan\");\n// console.log(apiCallBegan.type) || console.log(apiCallBegan.toString())\n// to define payload:\n// console.log(apiCallBegan({id:1})) this will add id as a property of payload obj\n\nexport const bugAdded = createAction(\"bugAdded\");\nexport const bugResolved = createAction(\"bugResolved\");\nexport const bugRemoved = createAction(\"bugRemoved\");\nexport const apiCallBegan = createAction(\"api/callBegan\");\nexport const apiCallSuccess = createAction(\"api/callSuccess\");\nexport const apiCallFailed = createAction(\"api/callFailed\"); // REDUCER\n// Note: reducer must always be a default export when following ducks pattern\n\nlet lastId = 0;\n/**\n * @description createSlice method replaces createAction & createReducer methods\n * Note that the name of reducers' properties can now be set to anything we want and it will be the only\n * place to update the name if we want to change it later in time unlike when we use createAction & createReducer\n * \n */\n\ncreateSlice({\n  name: \"bugs\",\n  initialState: [],\n  reducers: {\n    bugAdded: (state, action) => {\n      state.push({\n        id: lastId++,\n        description: action.payload.description,\n        resolved: false\n      });\n    },\n    bugResolved: (state, action) => {\n      const index = state.findIndex(bug => bug.id === action.payload.id);\n      state[index].resolved = true;\n    }\n  }\n});","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/bugs.js"],"names":["createAction","createReducer","createSlice","bugAdded","bugResolved","bugRemoved","apiCallBegan","apiCallSuccess","apiCallFailed","lastId","name","initialState","reducers","state","action","push","id","description","payload","resolved","index","findIndex","bug"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,WAAtC,QAAyD,kBAAzD,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAGH,YAAY,CAAC,UAAD,CAA7B;AACP,OAAO,MAAMI,WAAW,GAAGJ,YAAY,CAAC,aAAD,CAAhC;AACP,OAAO,MAAMK,UAAU,GAAGL,YAAY,CAAC,YAAD,CAA/B;AAEP,OAAO,MAAMM,YAAY,GAAGN,YAAY,CAAC,eAAD,CAAjC;AACP,OAAO,MAAMO,cAAc,GAAGP,YAAY,CAAC,iBAAD,CAAnC;AACP,OAAO,MAAMQ,aAAa,GAAGR,YAAY,CAAC,gBAAD,CAAlC,C,CACP;AACA;;AACA,IAAIS,MAAM,GAAG,CAAb;AACA;AACA;AACA;AACA;AACA;AACA;;AACAP,WAAW,CAAC;AACVQ,EAAAA,IAAI,EAAE,MADI;AAEVC,EAAAA,YAAY,EAAE,EAFJ;AAGVC,EAAAA,QAAQ,EAAE;AACRT,IAAAA,QAAQ,EAAE,CAACU,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACE,IAAN,CAAW;AACTC,QAAAA,EAAE,EAAEP,MAAM,EADD;AAETQ,QAAAA,WAAW,EAAEH,MAAM,CAACI,OAAP,CAAeD,WAFnB;AAGTE,QAAAA,QAAQ,EAAE;AAHD,OAAX;AAKD,KAPO;AAQRf,IAAAA,WAAW,EAAE,CAACS,KAAD,EAAQC,MAAR,KAAmB;AAC9B,YAAMM,KAAK,GAAGP,KAAK,CAACQ,SAAN,CAAiBC,GAAD,IAASA,GAAG,CAACN,EAAJ,KAAWF,MAAM,CAACI,OAAP,CAAeF,EAAnD,CAAd;AACAH,MAAAA,KAAK,CAACO,KAAD,CAAL,CAAaD,QAAb,GAAwB,IAAxB;AACD;AAXO;AAHA,CAAD,CAAX","sourcesContent":["import { createAction, createReducer, createSlice } from \"@reduxjs/toolkit\";\n// ACTION TYPES\n// const BUG_ADDED = \"bugAdded\";\n// const BUG_REMOVED = \"bugRemoved\";\n// const BUG_RESOLVED = \"bugResolved\";\n// ACTION CREATORS: manual approach\n// export const bugAdded = (description) => ({\n//   type: BUG_ADDED,\n//   payload: {\n//     description,\n//   },\n// });\n// ACTION CREATORS: concise approach using redux toolkit\n// createAction method creates an action creator\n// createAction has a type property that can be used to return action type (it can also be done using toString method)\n// Example:\n// const apiCallBegan = createAction(\"api/callBegan\");\n// console.log(apiCallBegan.type) || console.log(apiCallBegan.toString())\n// to define payload:\n// console.log(apiCallBegan({id:1})) this will add id as a property of payload obj\nexport const bugAdded = createAction(\"bugAdded\");\nexport const bugResolved = createAction(\"bugResolved\");\nexport const bugRemoved = createAction(\"bugRemoved\");\n\nexport const apiCallBegan = createAction(\"api/callBegan\");\nexport const apiCallSuccess = createAction(\"api/callSuccess\");\nexport const apiCallFailed = createAction(\"api/callFailed\");\n// REDUCER\n// Note: reducer must always be a default export when following ducks pattern\nlet lastId = 0;\n/**\n * @description createSlice method replaces createAction & createReducer methods\n * Note that the name of reducers' properties can now be set to anything we want and it will be the only\n * place to update the name if we want to change it later in time unlike when we use createAction & createReducer\n * \n */\ncreateSlice({\n  name: \"bugs\",\n  initialState: [],\n  reducers: {\n    bugAdded: (state, action) => {\n      state.push({\n        id: lastId++,\n        description: action.payload.description,\n        resolved: false,\n      });\n    },\n    bugResolved: (state, action) => {\n      const index = state.findIndex((bug) => bug.id === action.payload.id);\n      state[index].resolved = true;\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}