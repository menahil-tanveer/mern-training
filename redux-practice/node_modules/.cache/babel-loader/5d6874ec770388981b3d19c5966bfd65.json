{"ast":null,"code":"/**\n *\n * @param {*} store the store over here is not the actual store but an object that looks like it. This one only has\n * getState & dispatch properties\n * @param {*} next i.e. a refernce to next middleware function & if its the only one then reducer that\n * is going to handle this action\n * @param {*} action i.e. the action that is dispatched\n * @description\n * This method is supposed to log each dispatched action like the devtools\n * Originally it is written as:\n * const logger = (store, next, action) => {}\n * Implement curring i.e. convert a function with multiple params into multiple functions each with\n * a single parameter\n * to parameterise a middleware simply:\n */\nconst logger = params => _ref => {\n  let {\n    dispatch,\n    getState\n  } = _ref;\n  return next => action => {\n    console.log(\"logging\", params); // this will lead to reducer function which will alter the state\n\n    next(action);\n  };\n};\n\nexport default logger;","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store/middleware/logger.js"],"names":["logger","params","dispatch","getState","next","action","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAM,GAAIC,MAAD,IAAY;AAAA,MAAC;AAACC,IAAAA,QAAD;AAAUC,IAAAA;AAAV,GAAD;AAAA,SAA0BC,IAAD,IAAWC,MAAD,IAAY;AACxEC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,MAAvB,EADwE,CAExE;;AACAG,IAAAA,IAAI,CAACC,MAAD,CAAJ;AACD,GAJ0B;AAAA,CAA3B;;AAKA,eAAeL,MAAf","sourcesContent":["/**\n *\n * @param {*} store the store over here is not the actual store but an object that looks like it. This one only has\n * getState & dispatch properties\n * @param {*} next i.e. a refernce to next middleware function & if its the only one then reducer that\n * is going to handle this action\n * @param {*} action i.e. the action that is dispatched\n * @description\n * This method is supposed to log each dispatched action like the devtools\n * Originally it is written as:\n * const logger = (store, next, action) => {}\n * Implement curring i.e. convert a function with multiple params into multiple functions each with\n * a single parameter\n * to parameterise a middleware simply:\n */\nconst logger = (params) => ({dispatch,getState}) => (next) => (action) => {\n  console.log(\"logging\", params);\n  // this will lead to reducer function which will alter the state\n  next(action);\n};\nexport default logger;\n"]},"metadata":{},"sourceType":"module"}