{"ast":null,"code":"import { bugAdded, bugResolved, getUnresolvedBugs, getBugByUserId, bugAssigned } from \"./store/bugs\";\nimport { projectAdded } from \"./store/projects\";\nimport { userAdded } from \"./store/users\";\nimport configureStore from \"./store/configureStore\"; // import * as actions from \"./store/bugs\";\n\nconst store = configureStore(); // if written between dispatching actions, we will not be notified about the second action\n// const unsubscribe = store.subscribe(() => {\n//   console.log(\"store changed\", store.getState());\n// });\n// add bug\n\nstore.dispatch(projectAdded({\n  name: \"Project 1\"\n}));\nstore.dispatch(bugAdded({\n  description: \"bug 1\"\n}));\nstore.dispatch(bugAdded({\n  description: \"bug 2\"\n}));\nstore.dispatch(bugAdded({\n  description: \"bug 3\"\n})); // dispatching an action inside an action\n\nstore.dispatch(_ref => {\n  let {\n    dispatch,\n    getState\n  } = _ref;\n  dispatch({\n    type: \"bugsReceived\",\n    bugs: []\n  });\n}); // resolve\n\nstore.dispatch(bugResolved({\n  id: 1\n}));\nstore.dispatch(userAdded({\n  name: \"user 1\"\n}));\nstore.dispatch(userAdded({\n  name: \"user 2\"\n}));\nstore.dispatch(bugAssigned({\n  bugId: 1,\n  userId: 1\n}));\nconsole.log(\"store:\", store);\nconsole.log(\"state:\", store.getState());\nconst unresolvedBugs = getUnresolvedBugs(store.getState());\nconsole.log(\"unresolvedBugs\", unresolvedBugs);\nconst bugs = getBugByUserId(1)(store.getState());\nconsole.log(\"Get bug by user id::\", bugs); // store.dispatch(\n//   actions.apiCallBegan({\n//     url: \"/bugs\",\n//     onSucces: \"bugsReceived\",\n//   })\n// );","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/index.js"],"names":["bugAdded","bugResolved","getUnresolvedBugs","getBugByUserId","bugAssigned","projectAdded","userAdded","configureStore","store","dispatch","name","description","getState","type","bugs","id","bugId","userId","console","log","unresolvedBugs"],"mappings":"AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,iBAHF,EAIEC,cAJF,EAKEC,WALF,QAMO,cANP;AAOA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,QAA0B,eAA1B;AAEA,OAAOC,cAAP,MAA2B,wBAA3B,C,CACA;;AACA,MAAMC,KAAK,GAAGD,cAAc,EAA5B,C,CACA;AACA;AACA;AACA;AACA;;AACAC,KAAK,CAACC,QAAN,CAAeJ,YAAY,CAAC;AAAEK,EAAAA,IAAI,EAAE;AAAR,CAAD,CAA3B;AACAF,KAAK,CAACC,QAAN,CAAeT,QAAQ,CAAC;AAAEW,EAAAA,WAAW,EAAE;AAAf,CAAD,CAAvB;AACAH,KAAK,CAACC,QAAN,CAAeT,QAAQ,CAAC;AAAEW,EAAAA,WAAW,EAAE;AAAf,CAAD,CAAvB;AACAH,KAAK,CAACC,QAAN,CAAeT,QAAQ,CAAC;AAAEW,EAAAA,WAAW,EAAE;AAAf,CAAD,CAAvB,E,CACA;;AACAH,KAAK,CAACC,QAAN,CACI,QAA0B;AAAA,MAAzB;AAACA,IAAAA,QAAD;AAAWG,IAAAA;AAAX,GAAyB;AACtBH,EAAAA,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAC,cAAN;AAAsBC,IAAAA,IAAI,EAAC;AAA3B,GAAD,CAAR;AACH,CAHL,E,CAMA;;AACAN,KAAK,CAACC,QAAN,CAAeR,WAAW,CAAC;AAAEc,EAAAA,EAAE,EAAE;AAAN,CAAD,CAA1B;AACAP,KAAK,CAACC,QAAN,CAAeH,SAAS,CAAC;AAAEI,EAAAA,IAAI,EAAE;AAAR,CAAD,CAAxB;AACAF,KAAK,CAACC,QAAN,CAAeH,SAAS,CAAC;AAAEI,EAAAA,IAAI,EAAE;AAAR,CAAD,CAAxB;AACAF,KAAK,CAACC,QAAN,CAAeL,WAAW,CAAC;AAAEY,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,MAAM,EAAE;AAApB,CAAD,CAA1B;AAEAC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBX,KAAtB;AACAU,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBX,KAAK,CAACI,QAAN,EAAtB;AACA,MAAMQ,cAAc,GAAGlB,iBAAiB,CAACM,KAAK,CAACI,QAAN,EAAD,CAAxC;AACAM,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,cAA9B;AACA,MAAMN,IAAI,GAAGX,cAAc,CAAC,CAAD,CAAd,CAAkBK,KAAK,CAACI,QAAN,EAAlB,CAAb;AACAM,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCL,IAApC,E,CACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {\n  bugAdded,\n  bugResolved,\n  getUnresolvedBugs,\n  getBugByUserId,\n  bugAssigned,\n} from \"./store/bugs\";\nimport { projectAdded } from \"./store/projects\";\nimport { userAdded } from \"./store/users\";\n\nimport configureStore from \"./store/configureStore\";\n// import * as actions from \"./store/bugs\";\nconst store = configureStore();\n// if written between dispatching actions, we will not be notified about the second action\n// const unsubscribe = store.subscribe(() => {\n//   console.log(\"store changed\", store.getState());\n// });\n// add bug\nstore.dispatch(projectAdded({ name: \"Project 1\" }));\nstore.dispatch(bugAdded({ description: \"bug 1\" }));\nstore.dispatch(bugAdded({ description: \"bug 2\" }));\nstore.dispatch(bugAdded({ description: \"bug 3\" }));\n// dispatching an action inside an action\nstore.dispatch(\n    ({dispatch, getState}) => {\n        dispatch({type:\"bugsReceived\", bugs:[]})\n    }\n);\n\n// resolve\nstore.dispatch(bugResolved({ id: 1 }));\nstore.dispatch(userAdded({ name: \"user 1\" }));\nstore.dispatch(userAdded({ name: \"user 2\" }));\nstore.dispatch(bugAssigned({ bugId: 1, userId: 1 }));\n\nconsole.log(\"store:\", store);\nconsole.log(\"state:\", store.getState());\nconst unresolvedBugs = getUnresolvedBugs(store.getState());\nconsole.log(\"unresolvedBugs\", unresolvedBugs);\nconst bugs = getBugByUserId(1)(store.getState());\nconsole.log(\"Get bug by user id::\", bugs);\n// store.dispatch(\n//   actions.apiCallBegan({\n//     url: \"/bugs\",\n//     onSucces: \"bugsReceived\",\n//   })\n// );\n"]},"metadata":{},"sourceType":"module"}