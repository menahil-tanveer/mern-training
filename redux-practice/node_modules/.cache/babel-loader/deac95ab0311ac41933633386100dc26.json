{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport reducer from \"./\";\nimport logger from \"./store/middleware/logger\";\nimport displayToast from \"./store/middleware/displayToast\";\nimport api from \"./store/middleware/api\";\nimport { devToolsEnhancer } from \"redux-devtools-extension\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\"; // import func from \"./store/middleware/func\";\n//always pass a refernce of the function donot call it i.e. write 'reducer' rather than 'reducer()'\n// This is how a middleware is applied without using redux toolkit\n\nconst store = createStore(reducer, devToolsEnhancer({\n  trace: true\n})); //REDUX TOOLKIT (simplifies REDUX code)\n// const store = configureStore({\n//   reducer,\n//   middleware: [...getDefaultMiddleware(), logger(\"console\"), displayToast, api], //note: the order of middlewares matter & getDefaultMiddleware gets an array of all the middlewares && spread operator is used to copy them\n// });\n// passing a function in dispatch\n// here, type of this action is function\n\nstore.dispatch((dispatch, getState) => {\n  // Call an API\n  // If promise is resolved, dispatch this\n  dispatch({\n    type: \"bugsReceived\",\n    bugs: [1, 2, 3]\n  });\n  console.log(\"getState\", getState()); // If promise is rejected, dispatch that\n}); // console.log(\"dispatch error action::\");\n\nstore.dispatch({\n  type: \"error\",\n  payload: {\n    message: \"An error has occurred\"\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/store.js"],"names":["createStore","applyMiddleware","reducer","logger","displayToast","api","devToolsEnhancer","configureStore","getDefaultMiddleware","store","trace","dispatch","getState","type","bugs","console","log","payload","message"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,IAApB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AACA,OAAOC,GAAP,MAAgB,wBAAhB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD,C,CAEA;AAEA;AAEA;;AACA,MAAMC,KAAK,GAAGT,WAAW,CAACE,OAAD,EAAUI,gBAAgB,CAAC;AAAEI,EAAAA,KAAK,EAAE;AAAT,CAAD,CAA1B,CAAzB,C,CAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AACAD,KAAK,CAACE,QAAN,CAAe,CAACA,QAAD,EAAWC,QAAX,KAAwB;AACrC;AACA;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAE,cAAR;AAAwBC,IAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAA9B,GAAD,CAAR;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,QAAQ,EAAhC,EAJqC,CAKrC;AACD,CAND,E,CAOA;;AACAH,KAAK,CAACE,QAAN,CAAe;AACbE,EAAAA,IAAI,EAAE,OADO;AAEbI,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE;AADF;AAFI,CAAf;AAMA,eAAeT,KAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport reducer from \"./\";\nimport logger from \"./store/middleware/logger\";\nimport displayToast from \"./store/middleware/displayToast\";\nimport api from \"./store/middleware/api\";\nimport { devToolsEnhancer } from \"redux-devtools-extension\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n\n// import func from \"./store/middleware/func\";\n\n//always pass a refernce of the function donot call it i.e. write 'reducer' rather than 'reducer()'\n\n// This is how a middleware is applied without using redux toolkit\nconst store = createStore(reducer, devToolsEnhancer({ trace: true }));\n\n//REDUX TOOLKIT (simplifies REDUX code)\n\n// const store = configureStore({\n//   reducer,\n//   middleware: [...getDefaultMiddleware(), logger(\"console\"), displayToast, api], //note: the order of middlewares matter & getDefaultMiddleware gets an array of all the middlewares && spread operator is used to copy them\n// });\n\n// passing a function in dispatch\n// here, type of this action is function\nstore.dispatch((dispatch, getState) => {\n  // Call an API\n  // If promise is resolved, dispatch this\n  dispatch({ type: \"bugsReceived\", bugs: [1, 2, 3] });\n  console.log(\"getState\", getState());\n  // If promise is rejected, dispatch that\n});\n// console.log(\"dispatch error action::\");\nstore.dispatch({\n  type: \"error\",\n  payload: {\n    message: \"An error has occurred\",\n  },\n});\nexport default store;\n"]},"metadata":{},"sourceType":"module"}