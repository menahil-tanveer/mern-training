{"ast":null,"code":"var obj;\nvar NOTHING = typeof Symbol !== \"undefined\" ? Symbol(\"immer-nothing\") : (obj = {}, obj[\"immer-nothing\"] = true, obj);\nvar DRAFTABLE = typeof Symbol !== \"undefined\" && Symbol.for ? Symbol.for(\"immer-draftable\") : \"__$immer_draftable\";\nvar DRAFT_STATE = typeof Symbol !== \"undefined\" && Symbol.for ? Symbol.for(\"immer-state\") : \"__$immer_state\";\n\nfunction isDraft(value) {\n  return !!value && !!value[DRAFT_STATE];\n}\n\nfunction isDraftable(value) {\n  if (!value) {\n    return false;\n  }\n\n  return isPlainObject(value) || !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE];\n}\n\nfunction isPlainObject(value) {\n  if (!value || typeof value !== \"object\") {\n    return false;\n  }\n\n  if (Array.isArray(value)) {\n    return true;\n  }\n\n  var proto = Object.getPrototypeOf(value);\n  return !proto || proto === Object.prototype;\n}\n\nfunction original(value) {\n  if (value && value[DRAFT_STATE]) {\n    return value[DRAFT_STATE].base;\n  } // otherwise return undefined\n\n}\n\nvar assign = Object.assign || function assign(target, value) {\n  for (var key in value) {\n    if (has(value, key)) {\n      target[key] = value[key];\n    }\n  }\n\n  return target;\n};\n\nvar ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} : Object.getOwnPropertyNames;\n\nfunction shallowCopy(base, invokeGetters) {\n  if (invokeGetters === void 0) invokeGetters = false;\n\n  if (Array.isArray(base)) {\n    return base.slice();\n  }\n\n  var clone = Object.create(Object.getPrototypeOf(base));\n  ownKeys(base).forEach(function (key) {\n    if (key === DRAFT_STATE) {\n      return; // Never copy over draft state.\n    }\n\n    var desc = Object.getOwnPropertyDescriptor(base, key);\n    var value = desc.value;\n\n    if (desc.get) {\n      if (!invokeGetters) {\n        throw new Error(\"Immer drafts cannot have computed properties\");\n      }\n\n      value = desc.get.call(base);\n    }\n\n    if (desc.enumerable) {\n      clone[key] = value;\n    } else {\n      Object.defineProperty(clone, key, {\n        value: value,\n        writable: true,\n        configurable: true\n      });\n    }\n  });\n  return clone;\n}\n\nfunction each(value, cb) {\n  if (Array.isArray(value)) {\n    for (var i = 0; i < value.length; i++) {\n      cb(i, value[i], value);\n    }\n  } else {\n    ownKeys(value).forEach(function (key) {\n      return cb(key, value[key], value);\n    });\n  }\n}\n\nfunction isEnumerable(base, prop) {\n  var desc = Object.getOwnPropertyDescriptor(base, prop);\n  return !!desc && desc.enumerable;\n}\n\nfunction has(thing, prop) {\n  return Object.prototype.hasOwnProperty.call(thing, prop);\n}\n\nfunction is(x, y) {\n  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction clone(obj) {\n  if (!isDraftable(obj)) {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(clone);\n  }\n\n  var cloned = Object.create(Object.getPrototypeOf(obj));\n\n  for (var key in obj) {\n    cloned[key] = clone(obj[key]);\n  }\n\n  return cloned;\n}\n\nfunction deepFreeze(obj) {\n  if (!isDraftable(obj) || isDraft(obj) || Object.isFrozen(obj)) {\n    return;\n  }\n\n  Object.freeze(obj);\n\n  if (Array.isArray(obj)) {\n    obj.forEach(deepFreeze);\n  } else {\n    for (var key in obj) {\n      deepFreeze(obj[key]);\n    }\n  }\n}\n/** Each scope represents a `produce` call. */\n\n\nvar ImmerScope = function ImmerScope(parent) {\n  this.drafts = [];\n  this.parent = parent; // Whenever the modified draft contains a draft from another scope, we\n  // need to prevent auto-freezing so the unowned draft can be finalized.\n\n  this.canAutoFreeze = true; // To avoid prototype lookups:\n\n  this.patches = null;\n};\n\nImmerScope.prototype.usePatches = function usePatches(patchListener) {\n  if (patchListener) {\n    this.patches = [];\n    this.inversePatches = [];\n    this.patchListener = patchListener;\n  }\n};\n\nImmerScope.prototype.revoke = function revoke$1() {\n  this.leave();\n  this.drafts.forEach(revoke);\n  this.drafts = null; // Make draft-related methods throw.\n};\n\nImmerScope.prototype.leave = function leave() {\n  if (this === ImmerScope.current) {\n    ImmerScope.current = this.parent;\n  }\n};\n\nImmerScope.current = null;\n\nImmerScope.enter = function () {\n  return this.current = new ImmerScope(this.current);\n};\n\nfunction revoke(draft) {\n  draft[DRAFT_STATE].revoke();\n} // but share them all instead\n\n\nvar descriptors = {};\n\nfunction willFinalize(scope, result, isReplaced) {\n  scope.drafts.forEach(function (draft) {\n    draft[DRAFT_STATE].finalizing = true;\n  });\n\n  if (!isReplaced) {\n    if (scope.patches) {\n      markChangesRecursively(scope.drafts[0]);\n    } // This is faster when we don't care about which attributes changed.\n\n\n    markChangesSweep(scope.drafts);\n  } // When a child draft is returned, look for changes.\n  else if (isDraft(result) && result[DRAFT_STATE].scope === scope) {\n    markChangesSweep(scope.drafts);\n  }\n}\n\nfunction createProxy(base, parent) {\n  var isArray = Array.isArray(base);\n  var draft = clonePotentialDraft(base);\n  each(draft, function (prop) {\n    proxyProperty(draft, prop, isArray || isEnumerable(base, prop));\n  }); // See \"proxy.js\" for property documentation.\n\n  var scope = parent ? parent.scope : ImmerScope.current;\n  var state = {\n    scope: scope,\n    modified: false,\n    finalizing: false,\n    // es5 only\n    finalized: false,\n    assigned: {},\n    parent: parent,\n    base: base,\n    draft: draft,\n    copy: null,\n    revoke: revoke$1,\n    revoked: false // es5 only\n\n  };\n  createHiddenProperty(draft, DRAFT_STATE, state);\n  scope.drafts.push(draft);\n  return draft;\n}\n\nfunction revoke$1() {\n  this.revoked = true;\n}\n\nfunction source(state) {\n  return state.copy || state.base;\n} // Access a property without creating an Immer draft.\n\n\nfunction peek(draft, prop) {\n  var state = draft[DRAFT_STATE];\n\n  if (state && !state.finalizing) {\n    state.finalizing = true;\n    var value = draft[prop];\n    state.finalizing = false;\n    return value;\n  }\n\n  return draft[prop];\n}\n\nfunction get(state, prop) {\n  assertUnrevoked(state);\n  var value = peek(source(state), prop);\n\n  if (state.finalizing) {\n    return value;\n  } // Create a draft if the value is unmodified.\n\n\n  if (value === peek(state.base, prop) && isDraftable(value)) {\n    prepareCopy(state);\n    return state.copy[prop] = createProxy(value, state);\n  }\n\n  return value;\n}\n\nfunction set(state, prop, value) {\n  assertUnrevoked(state);\n  state.assigned[prop] = true;\n\n  if (!state.modified) {\n    if (is(value, peek(source(state), prop))) {\n      return;\n    }\n\n    markChanged(state);\n    prepareCopy(state);\n  }\n\n  state.copy[prop] = value;\n}\n\nfunction markChanged(state) {\n  if (!state.modified) {\n    state.modified = true;\n\n    if (state.parent) {\n      markChanged(state.parent);\n    }\n  }\n}\n\nfunction prepareCopy(state) {\n  if (!state.copy) {\n    state.copy = clonePotentialDraft(state.base);\n  }\n}\n\nfunction clonePotentialDraft(base) {\n  var state = base && base[DRAFT_STATE];\n\n  if (state) {\n    state.finalizing = true;\n    var draft = shallowCopy(state.draft, true);\n    state.finalizing = false;\n    return draft;\n  }\n\n  return shallowCopy(base);\n}\n\nfunction proxyProperty(draft, prop, enumerable) {\n  var desc = descriptors[prop];\n\n  if (desc) {\n    desc.enumerable = enumerable;\n  } else {\n    descriptors[prop] = desc = {\n      configurable: true,\n      enumerable: enumerable,\n      get: function get$1() {\n        return get(this[DRAFT_STATE], prop);\n      },\n      set: function set$1(value) {\n        set(this[DRAFT_STATE], prop, value);\n      }\n    };\n  }\n\n  Object.defineProperty(draft, prop, desc);\n}\n\nfunction assertUnrevoked(state) {\n  if (state.revoked === true) {\n    throw new Error(\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + JSON.stringify(source(state)));\n  }\n} // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\n\nfunction markChangesSweep(drafts) {\n  // The natural order of drafts in the `scope` array is based on when they\n  // were accessed. By processing drafts in reverse natural order, we have a\n  // better chance of processing leaf nodes first. When a leaf node is known to\n  // have changed, we can avoid any traversal of its ancestor nodes.\n  for (var i = drafts.length - 1; i >= 0; i--) {\n    var state = drafts[i][DRAFT_STATE];\n\n    if (!state.modified) {\n      if (Array.isArray(state.base)) {\n        if (hasArrayChanges(state)) {\n          markChanged(state);\n        }\n      } else if (hasObjectChanges(state)) {\n        markChanged(state);\n      }\n    }\n  }\n}\n\nfunction markChangesRecursively(object) {\n  if (!object || typeof object !== \"object\") {\n    return;\n  }\n\n  var state = object[DRAFT_STATE];\n\n  if (!state) {\n    return;\n  }\n\n  var base = state.base;\n  var draft = state.draft;\n  var assigned = state.assigned;\n\n  if (!Array.isArray(object)) {\n    // Look for added keys.\n    Object.keys(draft).forEach(function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (base[key] === undefined && !has(base, key)) {\n        assigned[key] = true;\n        markChanged(state);\n      } else if (!assigned[key]) {\n        // Only untouched properties trigger recursion.\n        markChangesRecursively(draft[key]);\n      }\n    }); // Look for removed keys.\n\n    Object.keys(base).forEach(function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (draft[key] === undefined && !has(draft, key)) {\n        assigned[key] = false;\n        markChanged(state);\n      }\n    });\n  } else if (hasArrayChanges(state)) {\n    markChanged(state);\n    assigned.length = true;\n\n    if (draft.length < base.length) {\n      for (var i = draft.length; i < base.length; i++) {\n        assigned[i] = false;\n      }\n    } else {\n      for (var i$1 = base.length; i$1 < draft.length; i$1++) {\n        assigned[i$1] = true;\n      }\n    }\n\n    for (var i$2 = 0; i$2 < draft.length; i$2++) {\n      // Only untouched indices trigger recursion.\n      if (assigned[i$2] === undefined) {\n        markChangesRecursively(draft[i$2]);\n      }\n    }\n  }\n}\n\nfunction hasObjectChanges(state) {\n  var base = state.base;\n  var draft = state.draft; // Search for added keys and changed keys. Start at the back, because\n  // non-numeric keys are ordered by time of definition on the object.\n\n  var keys = Object.keys(draft);\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    var key = keys[i];\n    var baseValue = base[key]; // The `undefined` check is a fast path for pre-existing keys.\n\n    if (baseValue === undefined && !has(base, key)) {\n      return true;\n    } // Once a base key is deleted, future changes go undetected, because its\n    // descriptor is erased. This branch detects any missed changes.\n    else {\n      var value = draft[key];\n      var state$1 = value && value[DRAFT_STATE];\n\n      if (state$1 ? state$1.base !== baseValue : !is(value, baseValue)) {\n        return true;\n      }\n    }\n  } // At this point, no keys were added or changed.\n  // Compare key count to determine if keys were deleted.\n\n\n  return keys.length !== Object.keys(base).length;\n}\n\nfunction hasArrayChanges(state) {\n  var draft = state.draft;\n\n  if (draft.length !== state.base.length) {\n    return true;\n  } // See #116\n  // If we first shorten the length, our array interceptors will be removed.\n  // If after that new items are added, result in the same original length,\n  // those last items will have no intercepting property.\n  // So if there is no own descriptor on the last position, we know that items were removed and added\n  // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n  // the last one\n\n\n  var descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\n  if (descriptor && !descriptor.get) {\n    return true;\n  } // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\n\n  return false;\n}\n\nfunction createHiddenProperty(target, prop, value) {\n  Object.defineProperty(target, prop, {\n    value: value,\n    enumerable: false,\n    writable: true\n  });\n}\n\nvar legacyProxy = /*#__PURE__*/Object.freeze({\n  willFinalize: willFinalize,\n  createProxy: createProxy\n});\n\nfunction willFinalize$1() {}\n\nfunction createProxy$1(base, parent) {\n  var scope = parent ? parent.scope : ImmerScope.current;\n  var state = {\n    // Track which produce call this is associated with.\n    scope: scope,\n    // True for both shallow and deep changes.\n    modified: false,\n    // Used during finalization.\n    finalized: false,\n    // Track which properties have been assigned (true) or deleted (false).\n    assigned: {},\n    // The parent draft state.\n    parent: parent,\n    // The base state.\n    base: base,\n    // The base proxy.\n    draft: null,\n    // Any property proxies.\n    drafts: {},\n    // The base copy with any updated values.\n    copy: null,\n    // Called by the `produce` function.\n    revoke: null\n  };\n  var ref = Array.isArray(base) ? // [state] is used for arrays, to make sure the proxy is array-ish and not violate invariants,\n  // although state itself is an object\n  Proxy.revocable([state], arrayTraps) : Proxy.revocable(state, objectTraps);\n  var revoke = ref.revoke;\n  var proxy = ref.proxy;\n  state.draft = proxy;\n  state.revoke = revoke;\n  scope.drafts.push(proxy);\n  return proxy;\n}\n\nvar objectTraps = {\n  get: get$1,\n  has: function has(target, prop) {\n    return prop in source$1(target);\n  },\n  ownKeys: function ownKeys(target) {\n    return Reflect.ownKeys(source$1(target));\n  },\n  set: set$1,\n  deleteProperty: deleteProperty,\n  getOwnPropertyDescriptor: getOwnPropertyDescriptor,\n  defineProperty: function defineProperty() {\n    throw new Error(\"Object.defineProperty() cannot be used on an Immer draft\"); // prettier-ignore\n  },\n  getPrototypeOf: function getPrototypeOf(target) {\n    return Object.getPrototypeOf(target.base);\n  },\n  setPrototypeOf: function setPrototypeOf() {\n    throw new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\"); // prettier-ignore\n  }\n};\nvar arrayTraps = {};\neach(objectTraps, function (key, fn) {\n  arrayTraps[key] = function () {\n    arguments[0] = arguments[0][0];\n    return fn.apply(this, arguments);\n  };\n});\n\narrayTraps.deleteProperty = function (state, prop) {\n  if (isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports deleting array indices\"); // prettier-ignore\n  }\n\n  return objectTraps.deleteProperty.call(this, state[0], prop);\n};\n\narrayTraps.set = function (state, prop, value) {\n  if (prop !== \"length\" && isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports setting array indices and the 'length' property\"); // prettier-ignore\n  }\n\n  return objectTraps.set.call(this, state[0], prop, value);\n}; // returns the object we should be reading the current value from, which is base, until some change has been made\n\n\nfunction source$1(state) {\n  return state.copy || state.base;\n} // Access a property without creating an Immer draft.\n\n\nfunction peek$1(draft, prop) {\n  var state = draft[DRAFT_STATE];\n  var desc = Reflect.getOwnPropertyDescriptor(state ? source$1(state) : draft, prop);\n  return desc && desc.value;\n}\n\nfunction get$1(state, prop) {\n  if (prop === DRAFT_STATE) {\n    return state;\n  }\n\n  var drafts = state.drafts; // Check for existing draft in unmodified state.\n\n  if (!state.modified && has(drafts, prop)) {\n    return drafts[prop];\n  }\n\n  var value = source$1(state)[prop];\n\n  if (state.finalized || !isDraftable(value)) {\n    return value;\n  } // Check for existing draft in modified state.\n\n\n  if (state.modified) {\n    // Assigned values are never drafted. This catches any drafts we created, too.\n    if (value !== peek$1(state.base, prop)) {\n      return value;\n    } // Store drafts on the copy (when one exists).\n\n\n    drafts = state.copy;\n  }\n\n  return drafts[prop] = createProxy$1(value, state);\n}\n\nfunction set$1(state, prop, value) {\n  if (!state.modified) {\n    var baseValue = peek$1(state.base, prop); // Optimize based on value's truthiness. Truthy values are guaranteed to\n    // never be undefined, so we can avoid the `in` operator. Lastly, truthy\n    // values may be drafts, but falsy values are never drafts.\n\n    var isUnchanged = value ? is(baseValue, value) || value === state.drafts[prop] : is(baseValue, value) && prop in state.base;\n\n    if (isUnchanged) {\n      return true;\n    }\n\n    markChanged$1(state);\n  }\n\n  state.assigned[prop] = true;\n  state.copy[prop] = value;\n  return true;\n}\n\nfunction deleteProperty(state, prop) {\n  // The `undefined` check is a fast path for pre-existing keys.\n  if (peek$1(state.base, prop) !== undefined || prop in state.base) {\n    state.assigned[prop] = false;\n    markChanged$1(state);\n  } else if (state.assigned[prop]) {\n    // if an originally not assigned property was deleted\n    delete state.assigned[prop];\n  }\n\n  if (state.copy) {\n    delete state.copy[prop];\n  }\n\n  return true;\n} // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n// the same guarantee in ES5 mode.\n\n\nfunction getOwnPropertyDescriptor(state, prop) {\n  var owner = source$1(state);\n  var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n\n  if (desc) {\n    desc.writable = true;\n    desc.configurable = !Array.isArray(owner) || prop !== \"length\";\n  }\n\n  return desc;\n}\n\nfunction markChanged$1(state) {\n  if (!state.modified) {\n    state.modified = true;\n    state.copy = assign(shallowCopy(state.base), state.drafts);\n    state.drafts = null;\n\n    if (state.parent) {\n      markChanged$1(state.parent);\n    }\n  }\n}\n\nvar modernProxy = /*#__PURE__*/Object.freeze({\n  willFinalize: willFinalize$1,\n  createProxy: createProxy$1\n});\n\nfunction generatePatches(state, basePath, patches, inversePatches) {\n  Array.isArray(state.base) ? generateArrayPatches(state, basePath, patches, inversePatches) : generateObjectPatches(state, basePath, patches, inversePatches);\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n  var assign, assign$1;\n  var base = state.base;\n  var copy = state.copy;\n  var assigned = state.assigned; // Reduce complexity by ensuring `base` is never longer.\n\n  if (copy.length < base.length) {\n    assign = [copy, base], base = assign[0], copy = assign[1];\n    assign$1 = [inversePatches, patches], patches = assign$1[0], inversePatches = assign$1[1];\n  }\n\n  var delta = copy.length - base.length; // Find the first replaced index.\n\n  var start = 0;\n\n  while (base[start] === copy[start] && start < base.length) {\n    ++start;\n  } // Find the last replaced index. Search from the end to optimize splice patches.\n\n\n  var end = base.length;\n\n  while (end > start && base[end - 1] === copy[end + delta - 1]) {\n    --end;\n  } // Process replaced indices.\n\n\n  for (var i = start; i < end; ++i) {\n    if (assigned[i] && copy[i] !== base[i]) {\n      var path = basePath.concat([i]);\n      patches.push({\n        op: \"replace\",\n        path: path,\n        value: copy[i]\n      });\n      inversePatches.push({\n        op: \"replace\",\n        path: path,\n        value: base[i]\n      });\n    }\n  }\n\n  var replaceCount = patches.length; // Process added indices.\n\n  for (var i$1 = end + delta - 1; i$1 >= end; --i$1) {\n    var path$1 = basePath.concat([i$1]);\n    patches[replaceCount + i$1 - end] = {\n      op: \"add\",\n      path: path$1,\n      value: copy[i$1]\n    };\n    inversePatches.push({\n      op: \"remove\",\n      path: path$1\n    });\n  }\n}\n\nfunction generateObjectPatches(state, basePath, patches, inversePatches) {\n  var base = state.base;\n  var copy = state.copy;\n  each(state.assigned, function (key, assignedValue) {\n    var origValue = base[key];\n    var value = copy[key];\n    var op = !assignedValue ? \"remove\" : key in base ? \"replace\" : \"add\";\n\n    if (origValue === value && op === \"replace\") {\n      return;\n    }\n\n    var path = basePath.concat(key);\n    patches.push(op === \"remove\" ? {\n      op: op,\n      path: path\n    } : {\n      op: op,\n      path: path,\n      value: value\n    });\n    inversePatches.push(op === \"add\" ? {\n      op: \"remove\",\n      path: path\n    } : op === \"remove\" ? {\n      op: \"add\",\n      path: path,\n      value: origValue\n    } : {\n      op: \"replace\",\n      path: path,\n      value: origValue\n    });\n  });\n}\n\nvar applyPatches = function (draft, patches) {\n  for (var i$1 = 0, list = patches; i$1 < list.length; i$1 += 1) {\n    var patch = list[i$1];\n    var path = patch.path;\n    var op = patch.op;\n    var value = clone(patch.value); // used to clone patch to ensure original patch is not modified, see #411\n\n    if (!path.length) {\n      throw new Error(\"Illegal state\");\n    }\n\n    var base = draft;\n\n    for (var i = 0; i < path.length - 1; i++) {\n      base = base[path[i]];\n\n      if (!base || typeof base !== \"object\") {\n        throw new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\"));\n      } // prettier-ignore\n\n    }\n\n    var key = path[path.length - 1];\n\n    switch (op) {\n      case \"replace\":\n        // if value is an object, then it's assigned by reference\n        // in the following add or remove ops, the value field inside the patch will also be modifyed\n        // so we use value from the cloned patch\n        base[key] = value;\n        break;\n\n      case \"add\":\n        if (Array.isArray(base)) {\n          // TODO: support \"foo/-\" paths for appending to an array\n          base.splice(key, 0, value);\n        } else {\n          base[key] = value;\n        }\n\n        break;\n\n      case \"remove\":\n        if (Array.isArray(base)) {\n          base.splice(key, 1);\n        } else {\n          delete base[key];\n        }\n\n        break;\n\n      default:\n        throw new Error(\"Unsupported patch operation: \" + op);\n    }\n  }\n\n  return draft;\n};\n\nfunction verifyMinified() {}\n\nvar configDefaults = {\n  useProxies: typeof Proxy !== \"undefined\" && typeof Proxy.revocable !== \"undefined\" && typeof Reflect !== \"undefined\",\n  autoFreeze: typeof process !== \"undefined\" ? process.env.NODE_ENV !== \"production\" : verifyMinified.name === \"verifyMinified\",\n  onAssign: null,\n  onDelete: null,\n  onCopy: null\n};\n\nvar Immer = function Immer(config) {\n  assign(this, configDefaults, config);\n  this.setUseProxies(this.useProxies);\n  this.produce = this.produce.bind(this);\n};\n\nImmer.prototype.produce = function produce(base, recipe, patchListener) {\n  var this$1 = this; // curried invocation\n\n  if (typeof base === \"function\" && typeof recipe !== \"function\") {\n    var defaultBase = recipe;\n    recipe = base;\n    var self = this;\n    return function curriedProduce(base) {\n      var this$1 = this;\n      if (base === void 0) base = defaultBase;\n      var args = [],\n          len = arguments.length - 1;\n\n      while (len-- > 0) args[len] = arguments[len + 1];\n\n      return self.produce(base, function (draft) {\n        return recipe.call.apply(recipe, [this$1, draft].concat(args));\n      }); // prettier-ignore\n    };\n  } // prettier-ignore\n\n\n  {\n    if (typeof recipe !== \"function\") {\n      throw new Error(\"The first or second argument to `produce` must be a function\");\n    }\n\n    if (patchListener !== undefined && typeof patchListener !== \"function\") {\n      throw new Error(\"The third argument to `produce` must be a function or undefined\");\n    }\n  }\n  var result; // Only plain objects, arrays, and \"immerable classes\" are drafted.\n\n  if (isDraftable(base)) {\n    var scope = ImmerScope.enter();\n    var proxy = this.createProxy(base);\n    var hasError = true;\n\n    try {\n      result = recipe(proxy);\n      hasError = false;\n    } finally {\n      // finally instead of catch + rethrow better preserves original stack\n      if (hasError) {\n        scope.revoke();\n      } else {\n        scope.leave();\n      }\n    }\n\n    if (result instanceof Promise) {\n      return result.then(function (result) {\n        scope.usePatches(patchListener);\n        return this$1.processResult(result, scope);\n      }, function (error) {\n        scope.revoke();\n        throw error;\n      });\n    }\n\n    scope.usePatches(patchListener);\n    return this.processResult(result, scope);\n  } else {\n    result = recipe(base);\n\n    if (result === NOTHING) {\n      return undefined;\n    }\n\n    if (result === undefined) {\n      result = base;\n    }\n\n    this.maybeFreeze(result, true);\n    return result;\n  }\n};\n\nImmer.prototype.produceWithPatches = function produceWithPatches(arg1, arg2, arg3) {\n  var this$1 = this;\n\n  if (typeof arg1 === \"function\") {\n    return function (state) {\n      var args = [],\n          len = arguments.length - 1;\n\n      while (len-- > 0) args[len] = arguments[len + 1];\n\n      return this$1.produceWithPatches(state, function (draft) {\n        return arg1.apply(void 0, [draft].concat(args));\n      });\n    };\n  } // non-curried form\n\n\n  if (arg3) {\n    throw new Error(\"A patch listener cannot be passed to produceWithPatches\");\n  }\n\n  var patches, inversePatches;\n  var nextState = this.produce(arg1, arg2, function (p, ip) {\n    patches = p;\n    inversePatches = ip;\n  });\n  return [nextState, patches, inversePatches];\n};\n\nImmer.prototype.createDraft = function createDraft(base) {\n  if (!isDraftable(base)) {\n    throw new Error(\"First argument to `createDraft` must be a plain object, an array, or an immerable object\"); // prettier-ignore\n  }\n\n  var scope = ImmerScope.enter();\n  var proxy = this.createProxy(base);\n  proxy[DRAFT_STATE].isManual = true;\n  scope.leave();\n  return proxy;\n};\n\nImmer.prototype.finishDraft = function finishDraft(draft, patchListener) {\n  var state = draft && draft[DRAFT_STATE];\n\n  if (!state || !state.isManual) {\n    throw new Error(\"First argument to `finishDraft` must be a draft returned by `createDraft`\"); // prettier-ignore\n  }\n\n  if (state.finalized) {\n    throw new Error(\"The given draft is already finalized\"); // prettier-ignore\n  }\n\n  var scope = state.scope;\n  scope.usePatches(patchListener);\n  return this.processResult(undefined, scope);\n};\n\nImmer.prototype.setAutoFreeze = function setAutoFreeze(value) {\n  this.autoFreeze = value;\n};\n\nImmer.prototype.setUseProxies = function setUseProxies(value) {\n  this.useProxies = value;\n  assign(this, value ? modernProxy : legacyProxy);\n};\n\nImmer.prototype.applyPatches = function applyPatches$1(base, patches) {\n  // If a patch replaces the entire state, take that replacement as base\n  // before applying patches\n  var i;\n\n  for (i = patches.length - 1; i >= 0; i--) {\n    var patch = patches[i];\n\n    if (patch.path.length === 0 && patch.op === \"replace\") {\n      base = patch.value;\n      break;\n    }\n  }\n\n  if (isDraft(base)) {\n    // N.B: never hits if some patch a replacement, patches are never drafts\n    return applyPatches(base, patches);\n  } // Otherwise, produce a copy of the base state.\n\n\n  return this.produce(base, function (draft) {\n    return applyPatches(draft, patches.slice(i + 1));\n  });\n};\n/** @internal */\n\n\nImmer.prototype.processResult = function processResult(result, scope) {\n  var baseDraft = scope.drafts[0];\n  var isReplaced = result !== undefined && result !== baseDraft;\n  this.willFinalize(scope, result, isReplaced);\n\n  if (isReplaced) {\n    if (baseDraft[DRAFT_STATE].modified) {\n      scope.revoke();\n      throw new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\"); // prettier-ignore\n    }\n\n    if (isDraftable(result)) {\n      // Finalize the result in case it contains (or is) a subset of the draft.\n      result = this.finalize(result, null, scope);\n      this.maybeFreeze(result);\n    }\n\n    if (scope.patches) {\n      scope.patches.push({\n        op: \"replace\",\n        path: [],\n        value: result\n      });\n      scope.inversePatches.push({\n        op: \"replace\",\n        path: [],\n        value: baseDraft[DRAFT_STATE].base\n      });\n    }\n  } else {\n    // Finalize the base draft.\n    result = this.finalize(baseDraft, [], scope);\n  }\n\n  scope.revoke();\n\n  if (scope.patches) {\n    scope.patchListener(scope.patches, scope.inversePatches);\n  }\n\n  return result !== NOTHING ? result : undefined;\n};\n/**\n * @internal\n * Finalize a draft, returning either the unmodified base state or a modified\n * copy of the base state.\n */\n\n\nImmer.prototype.finalize = function finalize(draft, path, scope) {\n  var this$1 = this;\n  var state = draft[DRAFT_STATE];\n\n  if (!state) {\n    if (Object.isFrozen(draft)) {\n      return draft;\n    }\n\n    return this.finalizeTree(draft, null, scope);\n  } // Never finalize drafts owned by another scope.\n\n\n  if (state.scope !== scope) {\n    return draft;\n  }\n\n  if (!state.modified) {\n    this.maybeFreeze(state.base, true);\n    return state.base;\n  }\n\n  if (!state.finalized) {\n    state.finalized = true;\n    this.finalizeTree(state.draft, path, scope);\n\n    if (this.onDelete) {\n      // The `assigned` object is unreliable with ES5 drafts.\n      if (this.useProxies) {\n        var assigned = state.assigned;\n\n        for (var prop in assigned) {\n          if (!assigned[prop]) {\n            this.onDelete(state, prop);\n          }\n        }\n      } else {\n        var base = state.base;\n        var copy = state.copy;\n        each(base, function (prop) {\n          if (!has(copy, prop)) {\n            this$1.onDelete(state, prop);\n          }\n        });\n      }\n    }\n\n    if (this.onCopy) {\n      this.onCopy(state);\n    } // At this point, all descendants of `state.copy` have been finalized,\n    // so we can be sure that `scope.canAutoFreeze` is accurate.\n\n\n    if (this.autoFreeze && scope.canAutoFreeze) {\n      Object.freeze(state.copy);\n    }\n\n    if (path && scope.patches) {\n      generatePatches(state, path, scope.patches, scope.inversePatches);\n    }\n  }\n\n  return state.copy;\n};\n/**\n * @internal\n * Finalize all drafts in the given state tree.\n */\n\n\nImmer.prototype.finalizeTree = function finalizeTree(root, rootPath, scope) {\n  var this$1 = this;\n  var state = root[DRAFT_STATE];\n\n  if (state) {\n    if (!this.useProxies) {\n      // Create the final copy, with added keys and without deleted keys.\n      state.copy = shallowCopy(state.draft, true);\n    }\n\n    root = state.copy;\n  }\n\n  var needPatches = !!rootPath && !!scope.patches;\n\n  var finalizeProperty = function (prop, value, parent) {\n    if (value === parent) {\n      throw Error(\"Immer forbids circular references\");\n    } // In the `finalizeTree` method, only the `root` object may be a draft.\n\n\n    var isDraftProp = !!state && parent === root;\n\n    if (isDraft(value)) {\n      var path = isDraftProp && needPatches && !state.assigned[prop] ? rootPath.concat(prop) : null; // Drafts owned by `scope` are finalized here.\n\n      value = this$1.finalize(value, path, scope); // Drafts from another scope must prevent auto-freezing.\n\n      if (isDraft(value)) {\n        scope.canAutoFreeze = false;\n      } // Preserve non-enumerable properties.\n\n\n      if (Array.isArray(parent) || isEnumerable(parent, prop)) {\n        parent[prop] = value;\n      } else {\n        Object.defineProperty(parent, prop, {\n          value: value\n        });\n      } // Unchanged drafts are never passed to the `onAssign` hook.\n\n\n      if (isDraftProp && value === state.base[prop]) {\n        return;\n      }\n    } // Unchanged draft properties are ignored.\n    else if (isDraftProp && is(value, state.base[prop])) {\n      return;\n    } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n    else if (isDraftable(value) && !Object.isFrozen(value)) {\n      each(value, finalizeProperty);\n      this$1.maybeFreeze(value);\n    }\n\n    if (isDraftProp && this$1.onAssign) {\n      this$1.onAssign(state, prop, value);\n    }\n  };\n\n  each(root, finalizeProperty);\n  return root;\n};\n\nImmer.prototype.maybeFreeze = function maybeFreeze(value, deep) {\n  if (deep === void 0) deep = false;\n\n  if (this.autoFreeze && !isDraft(value)) {\n    if (deep) {\n      deepFreeze(value);\n    } else {\n      Object.freeze(value);\n    }\n  }\n};\n\nvar immer = new Immer();\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\n\nvar produce = immer.produce;\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\n\nvar produceWithPatches = immer.produceWithPatches.bind(immer);\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\n\nvar setAutoFreeze = immer.setAutoFreeze.bind(immer);\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\n\nvar setUseProxies = immer.setUseProxies.bind(immer);\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\n\nvar applyPatches$1 = immer.applyPatches.bind(immer);\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\n\nvar createDraft = immer.createDraft.bind(immer);\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\n\nvar finishDraft = immer.finishDraft.bind(immer);\nexport default produce;\nexport { Immer, applyPatches$1 as applyPatches, createDraft, finishDraft, DRAFTABLE as immerable, isDraft, isDraftable, NOTHING as nothing, original, produce, produceWithPatches, setAutoFreeze, setUseProxies };","map":{"version":3,"mappings":"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","names":["NOTHING","Symbol","obj","DRAFTABLE","for","const","DRAFT_STATE","isDraft","value","isDraftable","isPlainObject","constructor","Array","isArray","proto","Object","getPrototypeOf","prototype","original","base","assign","target","let","key","has","ownKeys","Reflect","getOwnPropertySymbols","getOwnPropertyNames","concat","shallowCopy","invokeGetters","slice","clone","create","forEach","desc","getOwnPropertyDescriptor","get","Error","call","enumerable","defineProperty","writable","configurable","each","cb","i","length","isEnumerable","prop","thing","hasOwnProperty","is","x","y","map","cloned","deepFreeze","isFrozen","freeze","ImmerScope","parent","drafts","canAutoFreeze","patches","usePatches","patchListener","inversePatches","revoke","leave","current","enter","draft","descriptors","willFinalize","scope","result","isReplaced","finalizing","markChangesRecursively","markChangesSweep","createProxy","clonePotentialDraft","proxyProperty","state","modified","finalized","assigned","copy","revoked","createHiddenProperty","push","source","peek","assertUnrevoked","prepareCopy","set","markChanged","JSON","stringify","hasArrayChanges","hasObjectChanges","object","keys","undefined","baseValue","descriptor","Proxy","revocable","arrayTraps","objectTraps","proxy","deleteProperty","setPrototypeOf","fn","arguments","apply","isNaN","parseInt","isUnchanged","owner","generatePatches","basePath","generateArrayPatches","generateObjectPatches","delta","start","end","path","op","replaceCount","assignedValue","origValue","applyPatches","patch","join","splice","verifyMinified","configDefaults","useProxies","autoFreeze","process","env","NODE_ENV","name","onAssign","onDelete","onCopy","Immer","config","setUseProxies","produce","bind","recipe","defaultBase","self","curriedProduce","this","args","hasError","Promise","then","processResult","error","maybeFreeze","produceWithPatches","arg1","arg2","arg3","nextState","p","ip","createDraft","isManual","finishDraft","setAutoFreeze","modernProxy","legacyProxy","baseDraft","finalize","finalizeTree","root","rootPath","needPatches","finalizeProperty","isDraftProp","deep","immer"],"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/node_modules/@reduxjs/toolkit/node_modules/immer/src/common.js","/Users/menahaltanveer/Desktop/mern-training/redux-practice/node_modules/@reduxjs/toolkit/node_modules/immer/src/scope.js","/Users/menahaltanveer/Desktop/mern-training/redux-practice/node_modules/@reduxjs/toolkit/node_modules/immer/src/es5.js","/Users/menahaltanveer/Desktop/mern-training/redux-practice/node_modules/@reduxjs/toolkit/node_modules/immer/src/proxy.js","/Users/menahaltanveer/Desktop/mern-training/redux-practice/node_modules/@reduxjs/toolkit/node_modules/immer/src/patches.js","/Users/menahaltanveer/Desktop/mern-training/redux-practice/node_modules/@reduxjs/toolkit/node_modules/immer/src/immer.js","/Users/menahaltanveer/Desktop/mern-training/redux-practice/node_modules/@reduxjs/toolkit/node_modules/immer/src/index.js"],"sourcesContent":["export const NOTHING =\n\ttypeof Symbol !== \"undefined\"\n\t\t? Symbol(\"immer-nothing\")\n\t\t: {[\"immer-nothing\"]: true}\n\nexport const DRAFTABLE =\n\ttypeof Symbol !== \"undefined\" && Symbol.for\n\t\t? Symbol.for(\"immer-draftable\")\n\t\t: \"__$immer_draftable\"\n\nexport const DRAFT_STATE =\n\ttypeof Symbol !== \"undefined\" && Symbol.for\n\t\t? Symbol.for(\"immer-state\")\n\t\t: \"__$immer_state\"\n\nexport function isDraft(value) {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\nexport function isDraftable(value) {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) || !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE]\n\t)\n}\n\nexport function isPlainObject(value) {\n\tif (!value || typeof value !== \"object\") return false\n\tif (Array.isArray(value)) return true\n\tconst proto = Object.getPrototypeOf(value)\n\treturn !proto || proto === Object.prototype\n}\n\nexport function original(value) {\n\tif (value && value[DRAFT_STATE]) {\n\t\treturn value[DRAFT_STATE].base\n\t}\n\t// otherwise return undefined\n}\n\nexport const assign =\n\tObject.assign ||\n\tfunction assign(target, value) {\n\t\tfor (let key in value) {\n\t\t\tif (has(value, key)) {\n\t\t\t\ttarget[key] = value[key]\n\t\t\t}\n\t\t}\n\t\treturn target\n\t}\n\nexport const ownKeys =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj)\n\t\t\t\t)\n\t\t: Object.getOwnPropertyNames\n\nexport function shallowCopy(base, invokeGetters = false) {\n\tif (Array.isArray(base)) return base.slice()\n\tconst clone = Object.create(Object.getPrototypeOf(base))\n\townKeys(base).forEach(key => {\n\t\tif (key === DRAFT_STATE) {\n\t\t\treturn // Never copy over draft state.\n\t\t}\n\t\tconst desc = Object.getOwnPropertyDescriptor(base, key)\n\t\tlet {value} = desc\n\t\tif (desc.get) {\n\t\t\tif (!invokeGetters) {\n\t\t\t\tthrow new Error(\"Immer drafts cannot have computed properties\")\n\t\t\t}\n\t\t\tvalue = desc.get.call(base)\n\t\t}\n\t\tif (desc.enumerable) {\n\t\t\tclone[key] = value\n\t\t} else {\n\t\t\tObject.defineProperty(clone, key, {\n\t\t\t\tvalue,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true\n\t\t\t})\n\t\t}\n\t})\n\treturn clone\n}\n\nexport function each(value, cb) {\n\tif (Array.isArray(value)) {\n\t\tfor (let i = 0; i < value.length; i++) cb(i, value[i], value)\n\t} else {\n\t\townKeys(value).forEach(key => cb(key, value[key], value))\n\t}\n}\n\nexport function isEnumerable(base, prop) {\n\tconst desc = Object.getOwnPropertyDescriptor(base, prop)\n\treturn !!desc && desc.enumerable\n}\n\nexport function has(thing, prop) {\n\treturn Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\nexport function is(x, y) {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\nexport function clone(obj) {\n\tif (!isDraftable(obj)) return obj\n\tif (Array.isArray(obj)) return obj.map(clone)\n\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\tfor (const key in obj) cloned[key] = clone(obj[key])\n\treturn cloned\n}\n\nexport function deepFreeze(obj) {\n\tif (!isDraftable(obj) || isDraft(obj) || Object.isFrozen(obj)) return\n\tObject.freeze(obj)\n\tif (Array.isArray(obj)) obj.forEach(deepFreeze)\n\telse for (const key in obj) deepFreeze(obj[key])\n}\n","import {DRAFT_STATE} from \"./common\"\n\n/** Each scope represents a `produce` call. */\nexport class ImmerScope {\n\tconstructor(parent) {\n\t\tthis.drafts = []\n\t\tthis.parent = parent\n\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tthis.canAutoFreeze = true\n\n\t\t// To avoid prototype lookups:\n\t\tthis.patches = null\n\t}\n\tusePatches(patchListener) {\n\t\tif (patchListener) {\n\t\t\tthis.patches = []\n\t\t\tthis.inversePatches = []\n\t\t\tthis.patchListener = patchListener\n\t\t}\n\t}\n\trevoke() {\n\t\tthis.leave()\n\t\tthis.drafts.forEach(revoke)\n\t\tthis.drafts = null // Make draft-related methods throw.\n\t}\n\tleave() {\n\t\tif (this === ImmerScope.current) {\n\t\t\tImmerScope.current = this.parent\n\t\t}\n\t}\n}\n\nImmerScope.current = null\nImmerScope.enter = function() {\n\treturn (this.current = new ImmerScope(this.current))\n}\n\nfunction revoke(draft) {\n\tdraft[DRAFT_STATE].revoke()\n}\n","\"use strict\"\nimport {\n\teach,\n\thas,\n\tis,\n\tisDraft,\n\tisDraftable,\n\tisEnumerable,\n\tshallowCopy,\n\tDRAFT_STATE\n} from \"./common\"\nimport {ImmerScope} from \"./scope\"\n\n// property descriptors are recycled to make sure we don't create a get and set closure per property,\n// but share them all instead\nconst descriptors = {}\n\nexport function willFinalize(scope, result, isReplaced) {\n\tscope.drafts.forEach(draft => {\n\t\tdraft[DRAFT_STATE].finalizing = true\n\t})\n\tif (!isReplaced) {\n\t\tif (scope.patches) {\n\t\t\tmarkChangesRecursively(scope.drafts[0])\n\t\t}\n\t\t// This is faster when we don't care about which attributes changed.\n\t\tmarkChangesSweep(scope.drafts)\n\t}\n\t// When a child draft is returned, look for changes.\n\telse if (isDraft(result) && result[DRAFT_STATE].scope === scope) {\n\t\tmarkChangesSweep(scope.drafts)\n\t}\n}\n\nexport function createProxy(base, parent) {\n\tconst isArray = Array.isArray(base)\n\tconst draft = clonePotentialDraft(base)\n\teach(draft, prop => {\n\t\tproxyProperty(draft, prop, isArray || isEnumerable(base, prop))\n\t})\n\n\t// See \"proxy.js\" for property documentation.\n\tconst scope = parent ? parent.scope : ImmerScope.current\n\tconst state = {\n\t\tscope,\n\t\tmodified: false,\n\t\tfinalizing: false, // es5 only\n\t\tfinalized: false,\n\t\tassigned: {},\n\t\tparent,\n\t\tbase,\n\t\tdraft,\n\t\tcopy: null,\n\t\trevoke,\n\t\trevoked: false // es5 only\n\t}\n\n\tcreateHiddenProperty(draft, DRAFT_STATE, state)\n\tscope.drafts.push(draft)\n\treturn draft\n}\n\nfunction revoke() {\n\tthis.revoked = true\n}\n\nfunction source(state) {\n\treturn state.copy || state.base\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft, prop) {\n\tconst state = draft[DRAFT_STATE]\n\tif (state && !state.finalizing) {\n\t\tstate.finalizing = true\n\t\tconst value = draft[prop]\n\t\tstate.finalizing = false\n\t\treturn value\n\t}\n\treturn draft[prop]\n}\n\nfunction get(state, prop) {\n\tassertUnrevoked(state)\n\tconst value = peek(source(state), prop)\n\tif (state.finalizing) return value\n\t// Create a draft if the value is unmodified.\n\tif (value === peek(state.base, prop) && isDraftable(value)) {\n\t\tprepareCopy(state)\n\t\treturn (state.copy[prop] = createProxy(value, state))\n\t}\n\treturn value\n}\n\nfunction set(state, prop, value) {\n\tassertUnrevoked(state)\n\tstate.assigned[prop] = true\n\tif (!state.modified) {\n\t\tif (is(value, peek(source(state), prop))) return\n\t\tmarkChanged(state)\n\t\tprepareCopy(state)\n\t}\n\tstate.copy[prop] = value\n}\n\nfunction markChanged(state) {\n\tif (!state.modified) {\n\t\tstate.modified = true\n\t\tif (state.parent) markChanged(state.parent)\n\t}\n}\n\nfunction prepareCopy(state) {\n\tif (!state.copy) state.copy = clonePotentialDraft(state.base)\n}\n\nfunction clonePotentialDraft(base) {\n\tconst state = base && base[DRAFT_STATE]\n\tif (state) {\n\t\tstate.finalizing = true\n\t\tconst draft = shallowCopy(state.draft, true)\n\t\tstate.finalizing = false\n\t\treturn draft\n\t}\n\treturn shallowCopy(base)\n}\n\nfunction proxyProperty(draft, prop, enumerable) {\n\tlet desc = descriptors[prop]\n\tif (desc) {\n\t\tdesc.enumerable = enumerable\n\t} else {\n\t\tdescriptors[prop] = desc = {\n\t\t\tconfigurable: true,\n\t\t\tenumerable,\n\t\t\tget() {\n\t\t\t\treturn get(this[DRAFT_STATE], prop)\n\t\t\t},\n\t\t\tset(value) {\n\t\t\t\tset(this[DRAFT_STATE], prop, value)\n\t\t\t}\n\t\t}\n\t}\n\tObject.defineProperty(draft, prop, desc)\n}\n\nfunction assertUnrevoked(state) {\n\tif (state.revoked === true)\n\t\tthrow new Error(\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\t\tJSON.stringify(source(state))\n\t\t)\n}\n\n// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\nfunction markChangesSweep(drafts) {\n\t// The natural order of drafts in the `scope` array is based on when they\n\t// were accessed. By processing drafts in reverse natural order, we have a\n\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t// have changed, we can avoid any traversal of its ancestor nodes.\n\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\tconst state = drafts[i][DRAFT_STATE]\n\t\tif (!state.modified) {\n\t\t\tif (Array.isArray(state.base)) {\n\t\t\t\tif (hasArrayChanges(state)) markChanged(state)\n\t\t\t} else if (hasObjectChanges(state)) markChanged(state)\n\t\t}\n\t}\n}\n\nfunction markChangesRecursively(object) {\n\tif (!object || typeof object !== \"object\") return\n\tconst state = object[DRAFT_STATE]\n\tif (!state) return\n\tconst {base, draft, assigned} = state\n\tif (!Array.isArray(object)) {\n\t\t// Look for added keys.\n\t\tObject.keys(draft).forEach(key => {\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (base[key] === undefined && !has(base, key)) {\n\t\t\t\tassigned[key] = true\n\t\t\t\tmarkChanged(state)\n\t\t\t} else if (!assigned[key]) {\n\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\tmarkChangesRecursively(draft[key])\n\t\t\t}\n\t\t})\n\t\t// Look for removed keys.\n\t\tObject.keys(base).forEach(key => {\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (draft[key] === undefined && !has(draft, key)) {\n\t\t\t\tassigned[key] = false\n\t\t\t\tmarkChanged(state)\n\t\t\t}\n\t\t})\n\t} else if (hasArrayChanges(state)) {\n\t\tmarkChanged(state)\n\t\tassigned.length = true\n\t\tif (draft.length < base.length) {\n\t\t\tfor (let i = draft.length; i < base.length; i++) assigned[i] = false\n\t\t} else {\n\t\t\tfor (let i = base.length; i < draft.length; i++) assigned[i] = true\n\t\t}\n\t\tfor (let i = 0; i < draft.length; i++) {\n\t\t\t// Only untouched indices trigger recursion.\n\t\t\tif (assigned[i] === undefined) markChangesRecursively(draft[i])\n\t\t}\n\t}\n}\n\nfunction hasObjectChanges(state) {\n\tconst {base, draft} = state\n\n\t// Search for added keys and changed keys. Start at the back, because\n\t// non-numeric keys are ordered by time of definition on the object.\n\tconst keys = Object.keys(draft)\n\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\tconst key = keys[i]\n\t\tconst baseValue = base[key]\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (baseValue === undefined && !has(base, key)) {\n\t\t\treturn true\n\t\t}\n\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t// descriptor is erased. This branch detects any missed changes.\n\t\telse {\n\t\t\tconst value = draft[key]\n\t\t\tconst state = value && value[DRAFT_STATE]\n\t\t\tif (state ? state.base !== baseValue : !is(value, baseValue)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\n\t// At this point, no keys were added or changed.\n\t// Compare key count to determine if keys were deleted.\n\treturn keys.length !== Object.keys(base).length\n}\n\nfunction hasArrayChanges(state) {\n\tconst {draft} = state\n\tif (draft.length !== state.base.length) return true\n\t// See #116\n\t// If we first shorten the length, our array interceptors will be removed.\n\t// If after that new items are added, result in the same original length,\n\t// those last items will have no intercepting property.\n\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t// the last one\n\tconst descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1)\n\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\tif (descriptor && !descriptor.get) return true\n\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\treturn false\n}\n\nfunction createHiddenProperty(target, prop, value) {\n\tObject.defineProperty(target, prop, {\n\t\tvalue: value,\n\t\tenumerable: false,\n\t\twritable: true\n\t})\n}\n","\"use strict\"\nimport {\n\tassign,\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tisDraft,\n\tshallowCopy,\n\tDRAFT_STATE\n} from \"./common\"\nimport {ImmerScope} from \"./scope\"\n\n// Do nothing before being finalized.\nexport function willFinalize() {}\n\nexport function createProxy(base, parent) {\n\tconst scope = parent ? parent.scope : ImmerScope.current\n\tconst state = {\n\t\t// Track which produce call this is associated with.\n\t\tscope,\n\t\t// True for both shallow and deep changes.\n\t\tmodified: false,\n\t\t// Used during finalization.\n\t\tfinalized: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned: {},\n\t\t// The parent draft state.\n\t\tparent,\n\t\t// The base state.\n\t\tbase,\n\t\t// The base proxy.\n\t\tdraft: null,\n\t\t// Any property proxies.\n\t\tdrafts: {},\n\t\t// The base copy with any updated values.\n\t\tcopy: null,\n\t\t// Called by the `produce` function.\n\t\trevoke: null\n\t}\n\n\tconst {revoke, proxy} = Array.isArray(base)\n\t\t? // [state] is used for arrays, to make sure the proxy is array-ish and not violate invariants,\n\t\t  // although state itself is an object\n\t\t  Proxy.revocable([state], arrayTraps)\n\t\t: Proxy.revocable(state, objectTraps)\n\n\tstate.draft = proxy\n\tstate.revoke = revoke\n\n\tscope.drafts.push(proxy)\n\treturn proxy\n}\n\nconst objectTraps = {\n\tget,\n\thas(target, prop) {\n\t\treturn prop in source(target)\n\t},\n\townKeys(target) {\n\t\treturn Reflect.ownKeys(source(target))\n\t},\n\tset,\n\tdeleteProperty,\n\tgetOwnPropertyDescriptor,\n\tdefineProperty() {\n\t\tthrow new Error(\"Object.defineProperty() cannot be used on an Immer draft\") // prettier-ignore\n\t},\n\tgetPrototypeOf(target) {\n\t\treturn Object.getPrototypeOf(target.base)\n\t},\n\tsetPrototypeOf() {\n\t\tthrow new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\") // prettier-ignore\n\t}\n}\n\nconst arrayTraps = {}\neach(objectTraps, (key, fn) => {\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (isNaN(parseInt(prop))) {\n\t\tthrow new Error(\"Immer only supports deleting array indices\") // prettier-ignore\n\t}\n\treturn objectTraps.deleteProperty.call(this, state[0], prop)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (prop !== \"length\" && isNaN(parseInt(prop))) {\n\t\tthrow new Error(\"Immer only supports setting array indices and the 'length' property\") // prettier-ignore\n\t}\n\treturn objectTraps.set.call(this, state[0], prop, value)\n}\n\n// returns the object we should be reading the current value from, which is base, until some change has been made\nfunction source(state) {\n\treturn state.copy || state.base\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft, prop) {\n\tconst state = draft[DRAFT_STATE]\n\tconst desc = Reflect.getOwnPropertyDescriptor(\n\t\tstate ? source(state) : draft,\n\t\tprop\n\t)\n\treturn desc && desc.value\n}\n\nfunction get(state, prop) {\n\tif (prop === DRAFT_STATE) return state\n\tlet {drafts} = state\n\n\t// Check for existing draft in unmodified state.\n\tif (!state.modified && has(drafts, prop)) {\n\t\treturn drafts[prop]\n\t}\n\n\tconst value = source(state)[prop]\n\tif (state.finalized || !isDraftable(value)) {\n\t\treturn value\n\t}\n\n\t// Check for existing draft in modified state.\n\tif (state.modified) {\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value !== peek(state.base, prop)) return value\n\t\t// Store drafts on the copy (when one exists).\n\t\tdrafts = state.copy\n\t}\n\n\treturn (drafts[prop] = createProxy(value, state))\n}\n\nfunction set(state, prop, value) {\n\tif (!state.modified) {\n\t\tconst baseValue = peek(state.base, prop)\n\t\t// Optimize based on value's truthiness. Truthy values are guaranteed to\n\t\t// never be undefined, so we can avoid the `in` operator. Lastly, truthy\n\t\t// values may be drafts, but falsy values are never drafts.\n\t\tconst isUnchanged = value\n\t\t\t? is(baseValue, value) || value === state.drafts[prop]\n\t\t\t: is(baseValue, value) && prop in state.base\n\t\tif (isUnchanged) return true\n\t\tmarkChanged(state)\n\t}\n\tstate.assigned[prop] = true\n\tstate.copy[prop] = value\n\treturn true\n}\n\nfunction deleteProperty(state, prop) {\n\t// The `undefined` check is a fast path for pre-existing keys.\n\tif (peek(state.base, prop) !== undefined || prop in state.base) {\n\t\tstate.assigned[prop] = false\n\t\tmarkChanged(state)\n\t} else if (state.assigned[prop]) {\n\t\t// if an originally not assigned property was deleted\n\t\tdelete state.assigned[prop]\n\t}\n\tif (state.copy) delete state.copy[prop]\n\treturn true\n}\n\n// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n// the same guarantee in ES5 mode.\nfunction getOwnPropertyDescriptor(state, prop) {\n\tconst owner = source(state)\n\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\tif (desc) {\n\t\tdesc.writable = true\n\t\tdesc.configurable = !Array.isArray(owner) || prop !== \"length\"\n\t}\n\treturn desc\n}\n\nfunction markChanged(state) {\n\tif (!state.modified) {\n\t\tstate.modified = true\n\t\tstate.copy = assign(shallowCopy(state.base), state.drafts)\n\t\tstate.drafts = null\n\t\tif (state.parent) markChanged(state.parent)\n\t}\n}\n","import {each, clone} from \"./common\"\n\nexport function generatePatches(state, basePath, patches, inversePatches) {\n\tArray.isArray(state.base)\n\t\t? generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t: generateObjectPatches(state, basePath, patches, inversePatches)\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n\tlet {base, copy, assigned} = state\n\n\t// Reduce complexity by ensuring `base` is never longer.\n\tif (copy.length < base.length) {\n\t\t;[base, copy] = [copy, base]\n\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t}\n\n\tconst delta = copy.length - base.length\n\n\t// Find the first replaced index.\n\tlet start = 0\n\twhile (base[start] === copy[start] && start < base.length) {\n\t\t++start\n\t}\n\n\t// Find the last replaced index. Search from the end to optimize splice patches.\n\tlet end = base.length\n\twhile (end > start && base[end - 1] === copy[end + delta - 1]) {\n\t\t--end\n\t}\n\n\t// Process replaced indices.\n\tfor (let i = start; i < end; ++i) {\n\t\tif (assigned[i] && copy[i] !== base[i]) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: \"replace\",\n\t\t\t\tpath,\n\t\t\t\tvalue: copy[i]\n\t\t\t})\n\t\t\tinversePatches.push({\n\t\t\t\top: \"replace\",\n\t\t\t\tpath,\n\t\t\t\tvalue: base[i]\n\t\t\t})\n\t\t}\n\t}\n\n\tconst replaceCount = patches.length\n\n\t// Process added indices.\n\tfor (let i = end + delta - 1; i >= end; --i) {\n\t\tconst path = basePath.concat([i])\n\t\tpatches[replaceCount + i - end] = {\n\t\t\top: \"add\",\n\t\t\tpath,\n\t\t\tvalue: copy[i]\n\t\t}\n\t\tinversePatches.push({\n\t\t\top: \"remove\",\n\t\t\tpath\n\t\t})\n\t}\n}\n\nfunction generateObjectPatches(state, basePath, patches, inversePatches) {\n\tconst {base, copy} = state\n\teach(state.assigned, (key, assignedValue) => {\n\t\tconst origValue = base[key]\n\t\tconst value = copy[key]\n\t\tconst op = !assignedValue ? \"remove\" : key in base ? \"replace\" : \"add\"\n\t\tif (origValue === value && op === \"replace\") return\n\t\tconst path = basePath.concat(key)\n\t\tpatches.push(op === \"remove\" ? {op, path} : {op, path, value})\n\t\tinversePatches.push(\n\t\t\top === \"add\"\n\t\t\t\t? {op: \"remove\", path}\n\t\t\t\t: op === \"remove\"\n\t\t\t\t? {op: \"add\", path, value: origValue}\n\t\t\t\t: {op: \"replace\", path, value: origValue}\n\t\t)\n\t})\n}\n\nexport const applyPatches = (draft, patches) => {\n\tfor (const patch of patches) {\n\t\tconst {path, op} = patch\n\t\tconst value = clone(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\n\t\tif (!path.length) throw new Error(\"Illegal state\")\n\n\t\tlet base = draft\n\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\tbase = base[path[i]]\n\t\t\tif (!base || typeof base !== \"object\")\n\t\t\t\tthrow new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")) // prettier-ignore\n\t\t}\n\n\t\tconst key = path[path.length - 1]\n\t\tswitch (op) {\n\t\t\tcase \"replace\":\n\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t// so we use value from the cloned patch\n\t\t\t\tbase[key] = value\n\t\t\t\tbreak\n\t\t\tcase \"add\":\n\t\t\t\tif (Array.isArray(base)) {\n\t\t\t\t\t// TODO: support \"foo/-\" paths for appending to an array\n\t\t\t\t\tbase.splice(key, 0, value)\n\t\t\t\t} else {\n\t\t\t\t\tbase[key] = value\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase \"remove\":\n\t\t\t\tif (Array.isArray(base)) {\n\t\t\t\t\tbase.splice(key, 1)\n\t\t\t\t} else {\n\t\t\t\t\tdelete base[key]\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Unsupported patch operation: \" + op)\n\t\t}\n\t}\n\n\treturn draft\n}\n","import * as legacyProxy from \"./es5\"\nimport * as modernProxy from \"./proxy\"\nimport {applyPatches, generatePatches} from \"./patches\"\nimport {\n\tassign,\n\teach,\n\thas,\n\tis,\n\tisDraft,\n\tisDraftable,\n\tisEnumerable,\n\tshallowCopy,\n\tDRAFT_STATE,\n\tNOTHING,\n\tdeepFreeze\n} from \"./common\"\nimport {ImmerScope} from \"./scope\"\n\nfunction verifyMinified() {}\n\nconst configDefaults = {\n\tuseProxies:\n\t\ttypeof Proxy !== \"undefined\" &&\n\t\ttypeof Proxy.revocable !== \"undefined\" &&\n\t\ttypeof Reflect !== \"undefined\",\n\tautoFreeze:\n\t\ttypeof process !== \"undefined\"\n\t\t\t? process.env.NODE_ENV !== \"production\"\n\t\t\t: verifyMinified.name === \"verifyMinified\",\n\tonAssign: null,\n\tonDelete: null,\n\tonCopy: null\n}\n\nexport class Immer {\n\tconstructor(config) {\n\t\tassign(this, configDefaults, config)\n\t\tthis.setUseProxies(this.useProxies)\n\t\tthis.produce = this.produce.bind(this)\n\t}\n\tproduce(base, recipe, patchListener) {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(base = defaultBase, ...args) {\n\t\t\t\treturn self.produce(base, draft => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\t// prettier-ignore\n\t\t{\n\t\t\tif (typeof recipe !== \"function\") {\n\t\t\t\tthrow new Error(\"The first or second argument to `produce` must be a function\")\n\t\t\t}\n\t\t\tif (patchListener !== undefined && typeof patchListener !== \"function\") {\n\t\t\t\tthrow new Error(\"The third argument to `produce` must be a function or undefined\")\n\t\t\t}\n\t\t}\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = ImmerScope.enter()\n\t\t\tconst proxy = this.createProxy(base)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) scope.revoke()\n\t\t\t\telse scope.leave()\n\t\t\t}\n\t\t\tif (result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tscope.usePatches(patchListener)\n\t\t\t\t\t\treturn this.processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\tscope.revoke()\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tscope.usePatches(patchListener)\n\t\t\treturn this.processResult(result, scope)\n\t\t} else {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === NOTHING) return undefined\n\t\t\tif (result === undefined) result = base\n\t\t\tthis.maybeFreeze(result, true)\n\t\t\treturn result\n\t\t}\n\t}\n\tproduceWithPatches(arg1, arg2, arg3) {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\tconst self = this\n\t\t\treturn (state, ...args) =>\n\t\t\t\tthis.produceWithPatches(state, draft => arg1(draft, ...args))\n\t\t}\n\t\t// non-curried form\n\t\tif (arg3)\n\t\t\tthrow new Error(\"A patch listener cannot be passed to produceWithPatches\")\n\t\tlet patches, inversePatches\n\t\tconst nextState = this.produce(arg1, arg2, (p, ip) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [nextState, patches, inversePatches]\n\t}\n\tcreateDraft(base) {\n\t\tif (!isDraftable(base)) {\n\t\t\tthrow new Error(\"First argument to `createDraft` must be a plain object, an array, or an immerable object\") // prettier-ignore\n\t\t}\n\t\tconst scope = ImmerScope.enter()\n\t\tconst proxy = this.createProxy(base)\n\t\tproxy[DRAFT_STATE].isManual = true\n\t\tscope.leave()\n\t\treturn proxy\n\t}\n\tfinishDraft(draft, patchListener) {\n\t\tconst state = draft && draft[DRAFT_STATE]\n\t\tif (!state || !state.isManual) {\n\t\t\tthrow new Error(\"First argument to `finishDraft` must be a draft returned by `createDraft`\") // prettier-ignore\n\t\t}\n\t\tif (state.finalized) {\n\t\t\tthrow new Error(\"The given draft is already finalized\") // prettier-ignore\n\t\t}\n\t\tconst {scope} = state\n\t\tscope.usePatches(patchListener)\n\t\treturn this.processResult(undefined, scope)\n\t}\n\tsetAutoFreeze(value) {\n\t\tthis.autoFreeze = value\n\t}\n\tsetUseProxies(value) {\n\t\tthis.useProxies = value\n\t\tassign(this, value ? modernProxy : legacyProxy)\n\t}\n\tapplyPatches(base, patches) {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatches(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, draft =>\n\t\t\tapplyPatches(draft, patches.slice(i + 1))\n\t\t)\n\t}\n\t/** @internal */\n\tprocessResult(result, scope) {\n\t\tconst baseDraft = scope.drafts[0]\n\t\tconst isReplaced = result !== undefined && result !== baseDraft\n\t\tthis.willFinalize(scope, result, isReplaced)\n\t\tif (isReplaced) {\n\t\t\tif (baseDraft[DRAFT_STATE].modified) {\n\t\t\t\tscope.revoke()\n\t\t\t\tthrow new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\") // prettier-ignore\n\t\t\t}\n\t\t\tif (isDraftable(result)) {\n\t\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\t\tresult = this.finalize(result, null, scope)\n\t\t\t\tthis.maybeFreeze(result)\n\t\t\t}\n\t\t\tif (scope.patches) {\n\t\t\t\tscope.patches.push({\n\t\t\t\t\top: \"replace\",\n\t\t\t\t\tpath: [],\n\t\t\t\t\tvalue: result\n\t\t\t\t})\n\t\t\t\tscope.inversePatches.push({\n\t\t\t\t\top: \"replace\",\n\t\t\t\t\tpath: [],\n\t\t\t\t\tvalue: baseDraft[DRAFT_STATE].base\n\t\t\t\t})\n\t\t\t}\n\t\t} else {\n\t\t\t// Finalize the base draft.\n\t\t\tresult = this.finalize(baseDraft, [], scope)\n\t\t}\n\t\tscope.revoke()\n\t\tif (scope.patches) {\n\t\t\tscope.patchListener(scope.patches, scope.inversePatches)\n\t\t}\n\t\treturn result !== NOTHING ? result : undefined\n\t}\n\t/**\n\t * @internal\n\t * Finalize a draft, returning either the unmodified base state or a modified\n\t * copy of the base state.\n\t */\n\tfinalize(draft, path, scope) {\n\t\tconst state = draft[DRAFT_STATE]\n\t\tif (!state) {\n\t\t\tif (Object.isFrozen(draft)) return draft\n\t\t\treturn this.finalizeTree(draft, null, scope)\n\t\t}\n\t\t// Never finalize drafts owned by another scope.\n\t\tif (state.scope !== scope) {\n\t\t\treturn draft\n\t\t}\n\t\tif (!state.modified) {\n\t\t\tthis.maybeFreeze(state.base, true)\n\t\t\treturn state.base\n\t\t}\n\t\tif (!state.finalized) {\n\t\t\tstate.finalized = true\n\t\t\tthis.finalizeTree(state.draft, path, scope)\n\n\t\t\tif (this.onDelete) {\n\t\t\t\t// The `assigned` object is unreliable with ES5 drafts.\n\t\t\t\tif (this.useProxies) {\n\t\t\t\t\tconst {assigned} = state\n\t\t\t\t\tfor (const prop in assigned) {\n\t\t\t\t\t\tif (!assigned[prop]) this.onDelete(state, prop)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst {base, copy} = state\n\t\t\t\t\teach(base, prop => {\n\t\t\t\t\t\tif (!has(copy, prop)) this.onDelete(state, prop)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.onCopy) {\n\t\t\t\tthis.onCopy(state)\n\t\t\t}\n\n\t\t\t// At this point, all descendants of `state.copy` have been finalized,\n\t\t\t// so we can be sure that `scope.canAutoFreeze` is accurate.\n\t\t\tif (this.autoFreeze && scope.canAutoFreeze) {\n\t\t\t\tObject.freeze(state.copy)\n\t\t\t}\n\n\t\t\tif (path && scope.patches) {\n\t\t\t\tgeneratePatches(state, path, scope.patches, scope.inversePatches)\n\t\t\t}\n\t\t}\n\t\treturn state.copy\n\t}\n\t/**\n\t * @internal\n\t * Finalize all drafts in the given state tree.\n\t */\n\tfinalizeTree(root, rootPath, scope) {\n\t\tconst state = root[DRAFT_STATE]\n\t\tif (state) {\n\t\t\tif (!this.useProxies) {\n\t\t\t\t// Create the final copy, with added keys and without deleted keys.\n\t\t\t\tstate.copy = shallowCopy(state.draft, true)\n\t\t\t}\n\t\t\troot = state.copy\n\t\t}\n\n\t\tconst needPatches = !!rootPath && !!scope.patches\n\t\tconst finalizeProperty = (prop, value, parent) => {\n\t\t\tif (value === parent) {\n\t\t\t\tthrow Error(\"Immer forbids circular references\")\n\t\t\t}\n\n\t\t\t// In the `finalizeTree` method, only the `root` object may be a draft.\n\t\t\tconst isDraftProp = !!state && parent === root\n\n\t\t\tif (isDraft(value)) {\n\t\t\t\tconst path =\n\t\t\t\t\tisDraftProp && needPatches && !state.assigned[prop]\n\t\t\t\t\t\t? rootPath.concat(prop)\n\t\t\t\t\t\t: null\n\n\t\t\t\t// Drafts owned by `scope` are finalized here.\n\t\t\t\tvalue = this.finalize(value, path, scope)\n\n\t\t\t\t// Drafts from another scope must prevent auto-freezing.\n\t\t\t\tif (isDraft(value)) {\n\t\t\t\t\tscope.canAutoFreeze = false\n\t\t\t\t}\n\n\t\t\t\t// Preserve non-enumerable properties.\n\t\t\t\tif (Array.isArray(parent) || isEnumerable(parent, prop)) {\n\t\t\t\t\tparent[prop] = value\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty(parent, prop, {value})\n\t\t\t\t}\n\n\t\t\t\t// Unchanged drafts are never passed to the `onAssign` hook.\n\t\t\t\tif (isDraftProp && value === state.base[prop]) return\n\t\t\t}\n\t\t\t// Unchanged draft properties are ignored.\n\t\t\telse if (isDraftProp && is(value, state.base[prop])) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\t\t\telse if (isDraftable(value) && !Object.isFrozen(value)) {\n\t\t\t\teach(value, finalizeProperty)\n\t\t\t\tthis.maybeFreeze(value)\n\t\t\t}\n\n\t\t\tif (isDraftProp && this.onAssign) {\n\t\t\t\tthis.onAssign(state, prop, value)\n\t\t\t}\n\t\t}\n\n\t\teach(root, finalizeProperty)\n\t\treturn root\n\t}\n\tmaybeFreeze(value, deep = false) {\n\t\tif (this.autoFreeze && !isDraft(value)) {\n\t\t\tif (deep) deepFreeze(value)\n\t\t\telse Object.freeze(value)\n\t\t}\n\t}\n}\n","import {Immer} from \"./immer\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches = immer.produceWithPatches.bind(immer)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\nexport {\n\toriginal,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable\n} from \"./common\"\n\nexport {Immer}\n"]},"metadata":{},"sourceType":"module"}