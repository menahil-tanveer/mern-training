{"ast":null,"code":"import { bugAdded, bugResolved } from \"./actions\";\nimport store from \"./store\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport reducer from \"./reducer\";\nimport logger from \"./store/\"; // import configureStore from \"./store/configureStore\";\n// if written between dispatching actions, we will not be notified about the second action\n// const unsubscribe = store.subscribe(() => {\n//   console.log(\"store changed\", store.getState());\n// });\n// configureStore();\n// add bug\n\nconfigureStore({\n  reducer,\n  middleware: [logger({\n    destination: \"console\"\n  })]\n});\nstore.dispatch(bugAdded(\"bug 2\")); // resolve\n\nstore.dispatch(bugResolved(0));\nconsole.log(\"store:::\", store);\nconsole.log(\"state:::\", store.getState());","map":{"version":3,"sources":["/Users/menahaltanveer/Desktop/mern-training/redux-practice/src/index.js"],"names":["bugAdded","bugResolved","store","configureStore","reducer","logger","middleware","destination","dispatch","console","log","getState"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,WAAtC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AACAF,cAAc,CAAC;AACbC,EAAAA,OADa;AAEbE,EAAAA,UAAU,EAAE,CAACD,MAAM,CAAC;AAAEE,IAAAA,WAAW,EAAE;AAAf,GAAD,CAAP;AAFC,CAAD,CAAd;AAIAL,KAAK,CAACM,QAAN,CAAeR,QAAQ,CAAC,OAAD,CAAvB,E,CACA;;AACAE,KAAK,CAACM,QAAN,CAAeP,WAAW,CAAC,CAAD,CAA1B;AAEAQ,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBR,KAAxB;AACAO,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBR,KAAK,CAACS,QAAN,EAAxB","sourcesContent":["import { bugAdded, bugResolved } from \"./actions\";\nimport store from \"./store\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport reducer from \"./reducer\";\nimport logger from \"./store/\";\n// import configureStore from \"./store/configureStore\";\n\n// if written between dispatching actions, we will not be notified about the second action\n// const unsubscribe = store.subscribe(() => {\n//   console.log(\"store changed\", store.getState());\n// });\n\n// configureStore();\n// add bug\nconfigureStore({\n  reducer,\n  middleware: [logger({ destination: \"console\" })],\n});\nstore.dispatch(bugAdded(\"bug 2\"));\n// resolve\nstore.dispatch(bugResolved(0));\n\nconsole.log(\"store:::\", store);\nconsole.log(\"state:::\", store.getState());\n"]},"metadata":{},"sourceType":"module"}